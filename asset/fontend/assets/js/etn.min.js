/*  
---------------------------------------------------------------------------
*  Plugin Name: PS Exporter - Elementor to Nouvello Converter					    *
*  Author: NouvelloThemes                                                 *
*  Version: 1.0.0                                                         *
---------------------------------------------------------------------------
*/


jQuery(document).ready(function($) {

	"use strict";


	var executeBtn = $('#wpadminbar #wp-admin-bar-ps-exporter-adminbar-execute-conversion .ab-item');

	// console.log('Elementor to Nouvello Converter Init');

	$('#wp-admin-bar-elementor-to-nouvello').on('click', function(e){

		e.preventDefault()

		executeBtn.removeClass('ready'); // hide button;


		var elementorMarkupHolder = $('.entry-content .elementor-inner'); // elementor markup.


		// 1. Handle sections, rows and columns.

		// replace elementor-section with zanaya-section
		elementorMarkupHolder.find('.elementor-section').each(function(){

			var thisEl = $(this);

			var elClasses = '';

			if ( thisEl.hasClass('elementor-section-items-middle') ){
				elClasses = 'elementor-section-items-middle';
			}
			
			// get styles
			var compStyles = window.getComputedStyle(thisEl[0]);
    	
			thisEl.wrap(zanayaMarkups.section);

			// the actual zanaya element.
			var thisElParent = thisEl.parent(),
					cssObj = createCssObj( compStyles, [ 'background-color', 'background-image', 'background-position', 'background-size', 'padding', 'margin', 'height' ] );

			// prepare background image statement
			var bgImgUrl = cssObj['background-image'];

			delete cssObj['background-image']; // remove bg image property;
			thisElParent.css( cssObj ).addClass(elClasses); // apply styles to zanaya element.

			if ( undefined != bgImgUrl && null != bgImgUrl && '' != bgImgUrl && 'none' != bgImgUrl ) {
				var bgImgStatement = 'linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0) 0.1%), '+ bgImgUrl;
				thisElParent.css('background-image', bgImgStatement);
			}
			//

			thisEl.contents().unwrap();

		});

		// replace elementor-row with zanaya-row
		elementorMarkupHolder.find('.elementor-row').each(function(){

			var thisEl = $(this);

			// get styles
			var compStyles = window.getComputedStyle(thisEl.parents('.elementor-container')[0]);

			thisEl.wrap(zanayaMarkups.row);

			console.log( thisEl.parents('.elementor-container').css('max-width'))

			// the actual zanaya element.
			var thisElParent = thisEl.parent(),
					cssObj = createCssObj( compStyles, [ 'width'] );

		//	thisElParent.css( cssObj ); // apply styles to zanaya element.

			// should this be vertically aligned?
			if ( thisElParent.parents('.zanaya-section').hasClass('elementor-section-items-middle') ) {
				thisElParent.addClass('zanaya-vertical-horizontal-align');
				thisElParent.parents('.zanaya-section').removeClass('elementor-section-items-middle')
			}
			//

			thisEl.contents().unwrap();
		
		});


		// replace elementor-column with zanaya-col and apply correct col sizes.
		elementorMarkupHolder.find('.elementor-column').each(function(){

			var thisEl = $(this);

			// get styles
			var compStyles = window.getComputedStyle(thisEl.find('.elementor-column-wrap')[0]);

			if ( thisEl.hasClass('elementor-col-100') ) {
				thisEl.wrap(zanayaMarkups.col_12);			
			} else if ( thisEl.hasClass('elementor-col-50') ) {
				thisEl.wrap(zanayaMarkups.col_6);	
			} else if ( thisEl.hasClass('elementor-col-25') ) {
					thisEl.wrap(zanayaMarkups.col_3);			
			}	

			// the actual zanaya element.
			var thisElParent = thisEl.parent(),
					cssObj = createCssObj( compStyles, ['background-color', 'color', 'text-align', 'text-transform', 'padding', 'margin'] );

			thisElParent.css( cssObj ); // apply styles to zanaya element.			

			thisEl.contents().unwrap();
		});


	
		// 2. loop through elementor widgets.

		// headings
		var headingNodes = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
		for (var i = 0; i < headingNodes.length; i++) {
			elementorMarkupHolder.find(headingNodes[i]+'.elementor-heading-title').each(function(){

				var thisEl = $(this);
				thisEl.wrapInner('<'+headingNodes[i]+'></'+headingNodes[i]+'>').wrap(zanayaMarkups.text);

				// get styles
				var compStyles = window.getComputedStyle(thisEl[0]),
						compStylesWidgetContainer = window.getComputedStyle(thisEl.parents('.elementor-widget-container')[0]); // the parent holds styles like padding.
				//

				// the actual zanaya element.
				var thisElParent = thisEl.parent(),
						cssObj = createCssObj( compStyles, ['color', 'font-size', 'font-weight', 'line-height', 'letter-spacing', 'text-align', 'text-transform'] ),
						cssObjWidgetContainer = createCssObj( compStyles, ['padding'] );

				thisElParent.find(headingNodes[i]).css( cssObj ).css( cssObjWidgetContainer ); // apply styles to zanaya element.
				//

				thisEl.contents().unwrap()
					.parents('.elementor-widget-container').contents().unwrap()
					.parents('.elementor-widget-heading').contents().unwrap()
					.parents('.elementor-widget-wrap').contents().unwrap();

			});
		}


		// other text nodes: p, span, etc
		var textNodes = ['p', 'span'];
		for (var i = 0; i < textNodes.length; i++) {

			elementorMarkupHolder.find('.elementor-text-editor').find(textNodes[i]).each(function(){

				var thisEl = $(this);
				thisEl.wrapInner('<'+textNodes[i]+'></'+textNodes[i]+'>').wrap(zanayaMarkups.text);

				// get styles
				var compStyles = window.getComputedStyle(thisEl[0]),
						compStylesWidgetContainer = window.getComputedStyle(thisEl.parents('.elementor-widget-container')[0]); // the parent holds styles like padding.
				//


				// the actual zanaya element.
				var thisElParent = thisEl.parent(),
						cssObj = createCssObj( compStyles, ['color', 'font-size', 'font-weight', 'line-height', 'letter-spacing', 'text-align', 'text-transform'] ),
						cssObjWidgetContainer = createCssObj( compStyles, ['padding'] );

				thisElParent.find(textNodes[i]).css( cssObj ).css( cssObjWidgetContainer ); // apply styles to zanaya element.
				
				thisEl.contents().unwrap()
					.parents('.elementor-text-editor').contents().unwrap()
					.parents('.elementor-widget-container').contents().unwrap()
					.parents('.elementor-widget-text-editor').contents().unwrap();

				if ( undefined != thisElParent.find(textNodes[i])[0] && 'P' == thisElParent.find(textNodes[i])[0].nodeName ) {
					thisElParent.find(textNodes[i]).addClass('zanaya-p');
				}
				//

			});

		}	



		// buttons
		elementorMarkupHolder.find('.elementor-button-text').each(function(){
		
			var thisEl = $(this);

			// get styles
			var compStyles = window.getComputedStyle(thisEl.parents('.elementor-button')[0]),
					compStylesWidgetContainer = window.getComputedStyle(thisEl.parents('.elementor-widget-container')[0]), // the parent holds styles like padding.
					elTopParent = window.getComputedStyle(thisEl.parents('.elementor-widget-button')[0]); // holds alignment

			thisEl.parents('.elementor-widget-container').contents().unwrap();

			thisEl.wrap(zanayaMarkups.button);

			// the actual zanaya element.
			var thisElParent = thisEl.parent(),
					cssObj = createCssObj( compStyles, ['background-color', 'color', 'font-size', 'line-height', 'padding', 'margin', 'letter-spacing', 'border' ] );
			thisElParent.css( cssObj ).removeClass('button-color-primary'); // apply styles to zanaya element.
			//

			thisEl.contents().unwrap()
				.parents('.elementor-button-content-wrapper').contents().unwrap()
				.parents('.elementor-button').contents().unwrap()
				.parents('.elementor-button-wrapper').contents().unwrap()
				.parents('.elementor-widget-button').contents().unwrap();
		});

		// icons 
		elementorMarkupHolder.find('.elementor-icon i').each(function(){

			var thisEl = $(this),
					classList = thisEl.attr('class').split(/\s+/);
			

			thisEl.parents('.elementor-widget-icon').contents().unwrap();
			thisEl.parents('.elementor-widget-container').contents().unwrap();
			thisEl.parents('.elementor-icon-wrapper').contents().unwrap();
			thisEl.parents('.elementor-icon').contents().unwrap();

			thisEl.wrap(zanayaMarkups.icon);

			// the actual zanaya element.
			var thisElParent = thisEl.parent();
			thisElParent.addClass(classList.join(' '));
			// check for font-awesome family.
			if ( thisElParent.hasClass('fas') ) {
				thisElParent.removeClass('fas').addClass('fa');
			}
			//

			thisEl.remove();

		});	



		// images
		elementorMarkupHolder.find('.elementor-image').each(function(){

			var thisEl = $(this),
					imgSrc = thisEl.find('img').attr( 'src' );

			thisEl.parents('.elementor-widget-image').contents().unwrap();
			thisEl.parents('.elementor-widget-container').contents().unwrap();
			thisEl.parents('.elementor-widget-wrap').contents().unwrap();
		
			thisEl.wrap(zanayaMarkups.img);

			// the actual zanaya element.
			var thisElParent = thisEl.parent();
			thisElParent.attr('src', imgSrc);
			//

			thisEl.remove();

		});


		// dividers
	
		elementorMarkupHolder.find('.elementor-divider-separator').each(function(){

			var thisEl = $(this),
					compStyles = window.getComputedStyle(thisEl[0]),
					cssObj = createCssObj( compStyles, ['border-top-color', 'border-top-width', 'width' ] );
										
			thisEl.parents('.elementor-divider').contents().unwrap();
			thisEl.parents('.elementor-widget-container').contents().unwrap();
			thisEl.parents('.elementor-widget-divider').contents().unwrap();
		
			thisEl.wrap(zanayaMarkups.divider);

			// the actual zanaya element.
			var thisElParent = thisEl.parent();				
			thisElParent.css({'background-color':cssObj['border-top-color'], 'height':cssObj['border-top-width']}).removeClass('zanaya-primary-color'); // apply styles to zanaya element.
			//

			thisEl.remove();

		});



		// 3. cleanup - remove un needed parents and misc wrappers.

		elementorMarkupHolder.find('.elementor-section-wrap').each(function(){
			$(this).contents().unwrap();
		});
		elementorMarkupHolder.find('.elementor-container').each(function(){
			$(this).contents().unwrap();
		});
		elementorMarkupHolder.find('.elementor-column-wrap').each(function(){
			$(this).contents().unwrap();
		});

		// misc cleanups
		elementorMarkupHolder.find('.elementor-background-overlay').remove();
		

		elementorMarkupHolder.parents('[data-elementor-type="wp-page"]').contents().unwrap(); // remove elementor-inner parent.
		elementorMarkupHolder.contents().unwrap(); // remove elementor-inner.


		// 4. show execute button.
		executeBtn.addClass('ready');

	});


	// execute button click event.
	executeBtn.on('click', function(e) {

		e.preventDefault();

		var thisBtn = $(this);

		if ( ! thisBtn.hasClass('ready') ) {
			return false;
		} else {

			var postTitle = '',
					postContent = $('.entry-content').html();


			var promptTitle = prompt( 'Please enter the post title' );

			if ( null != promptTitle && '' != promptTitle ) {
				postTitle = promptTitle;
			} else {
				alert('Post title is required.')
				return false;
			}

			$.ajax({
				url: etn_converter_js_params.ajax_url,
				type: 'POST',
				data: {
						'action': 'ps_etn_execute_convertion',
						'title': postTitle,
						'content': postContent,
						'nonce': etn_converter_js_params.ajax_nonce
				},
				cache: false,
				success: function(data) {

					if ( 'zanaya_builder_not_installed' == data ) {
						console.log('Builder not installed.');
					} else{
						try {
							var jsonData = JSON.parse( data );
							if ( undefined != jsonData && undefined != jsonData.new_page_url ) {
								var redirect_url = decodeURIComponent(jsonData.new_page_url).replace('&#038;', '&');
								window.location = redirect_url;
							}                           
						} catch (e) {
							console.log(e);     
						}
					}
				}
			});

		}

	});

	////////////////////////////////////////////////////
	//																								//
	//      		      ZANAYA MARKUPS 									//
	//																								//
	///////////////////////////////////////////////////

	var zanayaMarkups = {};

	zanayaMarkups.section = '<div class="container zanaya-section"></div>';
	zanayaMarkups.row = '<div class="zanaya-row clearfix container" data-row-layout="1|2"></div>';
	zanayaMarkups.col_12 = '<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 zanaya-col"></div>';
	zanayaMarkups.col_6 = '<div class="col-lg-6 col-md-3 col-sm-3 col-xs-12 zanaya-col"></div>';
	zanayaMarkups.col_3 = '<div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 zanaya-col"></div>';
	zanayaMarkups.text = '<div data-zanaya-element="text-block" class="clearfix"></div>';
	zanayaMarkups.button = '<button class="btn zanaya-btn button-size-large button-text-small button-color-primary clearfix" data-zanaya-element="button"></button>';
	zanayaMarkups.icon = '<i class="fa zanaya-icon lg circle-border clearfix zanaya-primary-color" data-zanaya-element="icon"></i>'; // note: without icon class.
	zanayaMarkups.img = '<div data-zanaya-element="image" class="clearfix"><img class="img-responsive pull-center-lg zanaya-keep-src" src="" alt="image description" /></div>';
	zanayaMarkups.divider = '<div class="zanaya-divider center-block-lg clearfix zanaya-primary-color" data-zanaya-element="divider"></div>';


	// UTILITIES

	function createCssObj( compStyles, propArray ) {
		var cssObj = {};
		for (var i = 0; i < propArray.length; i++) {
			// console.log(compStyles.getPropertyValue(propArray[i]));
			cssObj[propArray[i]] = compStyles.getPropertyValue(propArray[i]);
		}

		// console.log(cssObj);

		return cssObj;

	}

}); // end of document ready