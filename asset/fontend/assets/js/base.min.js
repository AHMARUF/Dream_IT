/*  
---------------------------------------------------------------------------
*  Theme Name: Splent - Responsive Multi Purpose Templates w page builder  *
*  Author: NouvelloThemes                                                 *
*  Version: 1.0.0                                                         *
---------------------------------------------------------------------------
*/


/* Contents:

  DEBOUCE
  NAV MODULE
  HEADER AFFIX
  SCROLL TO
  MODAL
  FORMS
  VIDEO SLIDERS
  VIDEO PLAYER
  MASONRY GRIDS
  PARALAX
  ACCORDIONS
  TABS
  TABLES
  MULTI ITEM CAROUSEL
  PAGINATION
  ANIMATIONS
  ANIMATED HEADING
  PROGRESS BARS
  ANIMATED IMAGE SHADOW
  COUNTERS
  COUNTDOWNS  
  FLIP BOXES
  REVEAL
  LAVA
  PARALLAX MOUSE HOVER
  ISOTOPE
  MOUSE INTERACTIONS
  ANIMATED / MORPHING SVG
  GOOGLE MAPS
  LOADING SCREEN
*/
jQuery(document).ready(function($) {

	"use strict";

	var $_window = $(window),
		windowWidth = $_window.width(),
		html = $('html'),
		body = $('body'),
		nav = $('.zanaya-multi-nav'),
		navOnTop = $('#masthead').hasClass('nav-on-top'),
		content = $('#content'),
		zanayaNavbarToggle = nav.find('.zanaya-navbar-toggle'),
		scrollSnapParent = content.hasClass('scroll-snap-parent'),
		navHeight,
		preloader;

	/* ------------------  DEBOUNCE  ------------------ */

	// Returns a function, that, as long as it continues to be invoked, will not be triggered. 
	// The function will be called after it stops being called for N milliseconds. 
	// If `immediate` is passed, trigger the function on the leading edge, instead of the trailing.
	function debounce(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this,
				args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	}

	/* ------------------  NAV MODULE  ------------------ */

	function _instanceof(left, right) {
		if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
			return !!right[Symbol.hasInstance](left);
		} else {
			return left instanceof right;
		}
	}

	function _classCallCheck(instance, Constructor) {
		if (!_instanceof(instance, Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}

	function _createClass(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties(Constructor, staticProps);
		return Constructor;
	}

	// Menu shape morphing.
	if (nav.attr('data-zanaya-transitions')) {
		nav.addClass('transitions');
	}

	var navFxName, elmOverlay, overlay;
	var ease = {
		cubicInOut: function cubicInOut(t) {
			return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
		}
	};

	var ShapeOverlays =
		/*#__PURE__*/
		function() {
			function ShapeOverlays(elm) {
				_classCallCheck(this, ShapeOverlays);

				this.elm = elm;
				this.path = elm.querySelectorAll('path');
				this.numPoints = 10;
				this.duration = 900;
				this.delayPointsArray = [];
				this.delayPointsMax = 300;
				this.delayPerPath = 250;
				this.timeStart = Date.now();
				this.isOpened = false;
				this.isAnimating = false;
			}

			_createClass(ShapeOverlays, [{
				key: "toggle",
				value: function toggle() {
					this.isAnimating = true;

					for (var i = 0; i < this.numPoints; i++) {
						this.delayPointsArray[i] = Math.random() * this.delayPointsMax;
					}

					if (this.isOpened === false) {
						this.open();
					} else {
						this.close();
					}
				}
			}, {
				key: "open",
				value: function open() {
					this.isOpened = true;
					this.elm.classList.add('is-opened');
					this.timeStart = Date.now();
					this.renderLoop();
				}
			}, {
				key: "close",
				value: function close() {
					this.isOpened = false;
					this.elm.classList.remove('is-opened');
					this.timeStart = Date.now();
					this.renderLoop();
				}
			}, {
				key: "updatePath",
				value: function updatePath(time) {
					var points = [];

					for (var i = 0; i < this.numPoints; i++) {
						points[i] = (1 - ease.cubicInOut(Math.min(Math.max(time - this.delayPointsArray[i], 0) / this.duration, 1))) * 100;
					}

					var str = '';
					str += this.isOpened ? "M 0 0 V ".concat(points[0]) : "M 0 ".concat(points[0]);

					for (var _i = 0; _i < this.numPoints - 1; _i++) {
						var p = (_i + 1) / (this.numPoints - 1) * 100;
						var cp = p - 1 / (this.numPoints - 1) * 100 / 2;
						str += "C ".concat(cp, " ").concat(points[_i], " ").concat(cp, " ").concat(points[_i + 1], " ").concat(p, " ").concat(points[_i + 1], " ");
					}

					str += this.isOpened ? "V 100 H 0" : "V 0 H 0";
					return str;
				}
			}, {
				key: "render",
				value: function render() {
					if (this.isOpened) {
						for (var __i = 0; __i < this.path.length; __i++) {
							this.path[__i].setAttribute('d', this.updatePath(Date.now() - (this.timeStart + this.delayPerPath * __i)));
						}
					} else {
						for (var ___i = 0; ___i < this.path.length; ___i++) {
							this.path[___i].setAttribute('d', this.updatePath(Date.now() - (this.timeStart + this.delayPerPath * (this.path.length - ___i - 1))));
						}
					}
				}
			}, {
				key: "renderLoop",
				value: function renderLoop() {
					var _this = this;

					this.render();

					if (Date.now() - this.timeStart < this.duration + this.delayPerPath * (this.path.length - 1) + this.delayPointsMax) {
						requestAnimationFrame(function() {
							_this.renderLoop();
						});
					} else {
						this.isAnimating = false;
					}
				}
			}]);

			return ShapeOverlays;
		}();


	if ($('.shape-overlays').length > 0) {
		elmOverlay = document.querySelector('.shape-overlays');
		overlay = new ShapeOverlays(elmOverlay);
	}

	zanayaNavbarToggle.on('click', function(e) {
		e.stopPropagation();
		toggleNav();
	});


	function toggleNav(btn) {

		var $thisNav = nav,
			navbarCollapse = $thisNav.find('.navbar-collapse');

		html.toggleClass('hidden-overflow-y');

		var animatedIcon = $('.navbar-animated');
		animatedIcon.toggleClass('active');
		animatedIcon.toggleClass('not-active');

		if ($thisNav.hasClass('fullscreen') && $thisNav.hasClass('shape-transition') && undefined != overlay) {
			if (overlay.isAnimating) {
				return false;
			}

			$thisNav.toggleClass('affix-transparent');

			overlay.toggle();

			var navParentGroup = $thisNav.parents('.zanaya-section-group');

			if (!$thisNav.hasClass('collapsed')) {
				// open 
				setTimeout(function() {
					if (!navParentGroup.hasClass('nav-on-top')) {
						navParentGroup.next().css({
							'margin-top': $thisNav.height() + 'px'
						}); // adjust next section
					}

					$thisNav.removeClass('transitions').addClass('collapsed');
					navbarCollapse.addClass('collapsed-mode in animated fadeInUp'); // animate links
					$thisNav.css({
						'opacity': '0',
						'background': 'transparent'
					});
					$_window.scrollTop(0); // scroll window to top.
					$thisNav.animate({
						opacity: 1
					}, 500, function() {}); // fade in effect
				}, 1000);
			} else {
				// close
				$thisNav.addClass('transitions').css('position', 'absolute').removeClass('min-bg-transparancy');
				$thisNav.find('li.open').removeClass('open'); /* close any open dropdowns */
				navbarCollapse.removeClass('fadeInUp').addClass('fadeOut');
				setTimeout(function() {
					navbarCollapse.removeClass('collapsed-mode in animated fadeOut');
					setTimeout(function() {
						$thisNav.css({
							'position': '',
							'background': ''
						});
						if (!navParentGroup.hasClass('nav-on-top')) {
							navParentGroup.next().css({
								'margin-top': ''
							}); // adjust next section
						}
					}, 600);
					$thisNav.removeClass('collapsed'); // keep here to avoid links hidden in collapse mode from appearing early.
				}, 600);
			}

		} else if ($thisNav.hasClass('fullscreen')) { // fullscreen with fade or zoom

			if (!$thisNav.hasClass('collapsed')) {

				// fade into fullscreen nav
				if (false == navOnTop) {
					$thisNav.parents('.zanaya-section-group').next().css({
						'margin-top': $thisNav.height() + 'px'
					}); // adjust next section
				}
				$thisNav.removeClass('transitions').addClass('collapsed');
				$_window.scrollTop(0); // scroll window to top.

				if ($thisNav.hasClass('nav-zoom')) {
					// zoom in effect
					$thisNav.addClass('magictime swashIn fast');
				} else if ($thisNav.hasClass('nav-slidein-left')) {
					// slide-in-left effect
					$thisNav.css('left', '-100vw').animate({
						left: 0
					}, 500, function() {});
				} else if ($thisNav.hasClass('nav-slidein-right')) {
					// slide-in-right effect 
					$thisNav.css('right', '-100vw').animate({
						right: 0
					}, 500, function() {});
				} else {
					// default - fade in effect
					$thisNav.css('opacity', '0').animate({
						opacity: 1
					}, 500, function() {});
				}

				navbarCollapse.addClass('collapsed-mode in animated fadeInUp'); // animate links

			} else {
				// zoom out effect
				if ($thisNav.hasClass('nav-zoom')) {
					$thisNav.addClass('swashOut');
					setTimeout(function() {
						$thisNav.removeClass('magictime swashIn swashOut fast');
					}, 400);
				}

				var fadeOutNav = false;

				if (true == fadeOutNav) {
					// fade out nav
					$thisNav.animate({
						opacity: 0
					}, 500, function() {
						$thisNav.parents('.zanaya-section-group').next().css({
							'margin-top': ''
						}); // adjust next section
						$thisNav.removeClass('collapsed').css('opacity', '').addClass('animated fadeInDown');
						navbarCollapse.removeClass('collapsed-mode in animated fadeInUp');
						setTimeout(function() {
							$thisNav.removeClass('animated fadeInDown').addClass('transitions');
						}, 1000); // allow animation to finish
					});
				} else { // slide out nav
					$thisNav.addClass('transitions').css('position', 'absolute').removeClass('collapsed min-bg-transparancy');
					navbarCollapse.removeClass('collapsed-mode in animated fadeInUp');
					setTimeout(function() {
						$thisNav.css({
							'position': '',
							'right': '',
							'left': ''
						});
						if (false == navOnTop) {
							// adjust next section
							$thisNav.css({
								'position': '',
								'right': '',
								'left': ''
							}).parents('.zanaya-section-group').next().css({
								'margin-top': ''
							});
						}
					}, 600);
				}
			}

		} else { // default sliding effect. 
			if ($thisNav.hasClass('affixed')) {
				$_window.scrollTop(0);
			}

			navbarCollapse.on('show.bs.collapse', function(e) {
				e.stopPropagation();
				navbarCollapse.addClass('collapsed-mode');
				$thisNav.addClass('collapsed');
				if ($thisNav.css('background-color') == 'rgba(0, 0, 0, 0)') {
					$thisNav.addClass('min-bg-transparancy'); // add a bit of background color to the collapse nav if it is transparent
				}
			});
			navbarCollapse.on('hide.bs.collapse', function(e) {
				e.stopPropagation();
			});
			navbarCollapse.on('hidden.bs.collapse', function(e) {
				e.stopPropagation();
				navbarCollapse.removeClass('collapsed-mode');
				$thisNav.removeClass('collapsed min-bg-transparancy');
			});

			navbarCollapse.collapse('toggle');
		}

	} // end of toggleNav().

	$_window.on('orientationchange', function(e) {
		if (nav.hasClass('collapsed') && nav.hasClass('fullscreen')) {
			zanayaNavbarToggle.trigger('click'); // close the nav bar 
		}
	});


	// Adjust dropdown menus if their content is not entirly visible.
	body.not('.error404').not('.error403').find('.zanaya-multi-nav li.dropdown').on('mouseenter mouseleave', function(e) {
		if ($('.dropdown', this).length || $('.dropdown-submenu', this).length || $('.dropdown-menu.sub-menu', this).length) {
			adjustEdgeMenuItem($('ul', this));
		}
	});

	function adjustEdgeMenuItem(elm) {
		var off = elm.offset(),
			l = off.left,
			w = elm.width(),
			bodyH = body.height(),
			bodyW = body.width(),
			isEntirelyVisible = (l + w <= bodyW);

		if (!isEntirelyVisible) {
			elm.addClass('edge');
		} else {
			elm.removeClass('edge');
		}
	}

	// mega menu parent hover
	nav.find('.mega-dropdown.dropdown').on({
		mouseover: function() {
			if ( undefined != nav.attr('data-class-marker') && '' != nav.attr('data-class-marker') ){
				nav.addClass('mega-dropdown-hovered');
			}
		},
		mouseout: function() {
			nav.removeClass('mega-dropdown-hovered');
		},
	});

	// search button
	$('.full-width-search').on('click', function(e) {
		toggleNavSearch(this);
	});

	// mobile search button
	$('.mobile-search').on('click', function(e) {
		e.stopImmediatePropagation();
		var searchTransition = true;
		if (false == searchTransition) {
			toggleNavSearch($(this).parents('nav').find('.zanaya-nav-search')[0]); // simple search option
		} else {
			openSearchTransition(); // new search with transition.
		}
	});

	function toggleNavSearch(li) {

		// toggle regular search
		var $thisLi = $(li),
			$thisIcon = $thisLi.find('a span'),
			$navLogo = $('.zanaya-multi-nav-logo');

		if ($thisIcon.hasClass('fa-search')) {
			$navLogo.css('opacity', '0');
			$thisLi.addClass('opened');
			$thisIcon.removeClass('fa-search').addClass('fa-close');
		} else {
			$navLogo.css('opacity', '');
			$thisLi.removeClass('opened');
			$thisIcon.removeClass('fa-close').addClass('fa-search');
		}

		var $thisNav = $thisLi.parents('.zanaya-multi-nav'),
			navbarCollapse = $thisNav.find('.navbar-collapse'),
			navSearchForm = $thisNav.find('.nav-search-form'),
			navbarHeader = $thisNav.find('.navbar-header'),
			navbarBrand = $thisNav.find('.navbar-brand'),
			navbarToggle = $thisNav.find('.zanaya-navbar-toggle');


		if ($thisNav.attr('data-zanaya-transitions') == 'true') {
			$thisNav.toggleClass('transitions');
		} // remove transitions before opening search and restore then when closed.
		$thisNav.toggleClass('search-open');
		navbarCollapse.toggleClass('relative');
		navSearchForm.toggleClass('active').find('input').focus();


		// toggle mobile search
		$thisNav.toggleClass('mobile-search-open');
		navbarHeader.toggleClass('mobile-search-open');
		if (navbarHeader.hasClass('mobile-search-open')) {
			navbarToggle.addClass('no-opacity');
			navbarBrand.addClass('no-opacity');
			navbarHeader.find('i.mobile-search').removeClass('fa-search').addClass('fa-close');
			var navSearchFormMobile = $thisNav.find('.nav-search-form-mobile');
			navSearchFormMobile.find('input').focus();
		} else {
			navbarToggle.removeClass('no-opacity');
			navbarBrand.removeClass('no-opacity');
			navbarHeader.find('i.mobile-search').removeClass('fa-close').addClass('fa-search');
		}

		// check if nav is collapsed and if so close it while search is displayed - this prevents a problem that would otherwise accure if the user toggle the nav to open, then clicked the search and then switched back to regular non mobile view
		if (navbarCollapse.hasClass('collapsed-mode')) {
			navbarCollapse.find('.navbar-collapse').collapse('toggle');
		}
	}

	// Menu search morph.
	var htmlClasslist = document.documentElement.classList;
	htmlClasslist.add('zanaya-split-search');
	
	// transition search        
	$('.open-search-wrap').removeClass('opacity-0');
	$('.search').removeClass('opacity-0');

	var mainContainer = document.querySelector('.open-search-wrap'),
		openCtrl = $('#btn-search'),
		searchContainer = document.querySelector('.search__container'),
		inputSearch = $('.search__input')[0];

	openCtrl.on('click', function() {
		var searchTransition = true;
		if (false == searchTransition) {
			toggleNavSearch($(this).parents('nav').find('.zanaya-nav-search')[0]); // simple search option
		} else {
			openSearchTransition(); // search with transition.
		}
	});

	document.addEventListener('keyup', function(ev) {
		// escape key.
		if (ev.keyCode == 27) {
			closeSearchTransition();
			if ( undefined != modal && modal.hasClass('modal-active') ) {
				modal.removeClass('modal-active').hide(400);
				modalContent.removeClass('visible');				
			}
		}
		// tab key - link accessibility for nav menu.
		var activeElement;
		if (ev.keyCode == 9) {
			activeElement = document.activeElement;			
			if (activeElement.tagName.toLowerCase() == 'a'){
				// clear previous.
				if ( ! $(activeElement).parents('.dropdown').hasClass('accessibility-opened') ) {
					$('.accessibility-opened').removeClass('accessibility-opened');
				}
				// clear previous - close submenus when navigating through them is completed.
				if ( $(activeElement).parent().parent().hasClass('depth_0') ) {
					$('.dropdown-submenu').removeClass('accessibility-opened');
				}	
				// if active link is nested inside a dropdown - open it.
				if ( $(activeElement).hasClass('dropdown-toggle') ) {
					$(activeElement).parents('.dropdown').addClass('accessibility-opened');
				}
			}  
		}
	});

	// close search
	$('.search__close').on('click', function() {
		closeSearchTransition();
	});

	function openSearchTransition() {
		$('.zanaya-scroll-top-wrap').addClass('opacity-0');
		mainContainer.classList.add('open-search-wrap--hide');
		searchContainer.classList.add('search--open');
		setTimeout(function() {
			inputSearch.focus();
		}, 750);
	}

	function closeSearchTransition() {
		$('.zanaya-scroll-top-wrap').removeClass('opacity-0');
		mainContainer.classList.remove('open-search-wrap--hide');
		searchContainer.classList.remove('search--open');
		inputSearch.blur();
		inputSearch.value = '';
	}

	// Nav: nested links         
	$('.navbar a.dropdown-toggle').on('click', function(e) {

		// prevent adding open class to links unless nav is collapsed since we use hover for non collapsed mode.
		if (!nav.hasClass('collapsed')) {
			e.preventDefault();
			e.stopPropagation();
			return false;
		}

		var $thisEl = $(this);

		// support for centered links in collapsed mode.
		if ($thisEl.css('text-align') == 'center') {
			nav.find('.navbar-collapse').addClass('centered-links');
		}

		var $parent = $thisEl.offsetParent('.dropdown-menu');
		$thisEl.parent('li').toggleClass('open');

		if (!$parent.parent().hasClass('nav')) {
			if (!$thisEl.next().hasClass('mega-dropdown-menu') && !$thisEl.next().hasClass('mega-dropdown')) { // exclude megamenu
				$thisEl.next().addClass('pos-initial'); // in collapsed mode position lested links below their parent.
			}
		}

		$('.nav li.open').not($thisEl.parents('li')).removeClass('open');

		return false;
	});


	// cart - regular modes
	var cartMouseLeaveTimer,
		cartContainer = $('.zanaya-cart-container'),
		cartWrapper = $('.zanaya-shopping-cart-wrapper'),
		zanayaCartToggle = $('.zanaya-cart-toggle'),
		cartLink = $('.cart-link'),
		cartLinkhover = cartLink.parents('.zanaya-hover-dropdowns');

	cartLink.on({
		mouseenter: function() {
			if (cartLinkhover.length > 0) {
				openZanayaCart($(this));
			}
			clearTimeout(cartMouseLeaveTimer);
		},
		mouseleave: function() {
			cartMouseLeaveTimer = setTimeout(function() {
				if ($('.zanaya-cart-container:hover').length == 0 && cartLinkhover.length > 0) {
					cartWrapper.removeClass('cart-open').fadeOut();
				}
			}, 100);
		},
		click: function() {
			openZanayaCart($(this));
		}
	});

	cartContainer.on('mouseleave', function() {
		if (cartLinkhover.length > 0) {
			cartWrapper.removeClass('cart-open').fadeOut();
		}
	});


	function openZanayaCart(cartLink) {
		var cartParentPosition = windowWidth - cartLink.offset().left - cartLink.parent().outerWidth();
		cartContainer.removeClass('container').css({
			'right': cartParentPosition + 'px',
			'top': ''
		});
		cartWrapper.addClass('cart-open').fadeIn();
	}

	// cart - mobile modes
	zanayaCartToggle.on('click', function() {
		cartContainer.addClass('container').css({
			'right': '0',
			'top': +zanayaCartToggle.outerHeight() + 'px'
		});
		cartWrapper.toggleClass('cart-open').fadeToggle();
	});


	// nav presets and styling.

	// nav menu links - support forleft side, center and right sided links
	nav.find('.menu-item').each(function() {
		var $thisLink = $(this);
		if ($thisLink.parents('.dropdown').length == 0 && $thisLink.hasClass('zanaya-menu-link-left')) {
			$thisLink.appendTo(nav.find('.navbar-nav.navbar-left'));
		} else if ($thisLink.parents('.dropdown').length == 0 && $thisLink.hasClass('zanaya-menu-link-center')) {
			$thisLink.appendTo(nav.find('.navbar-nav.navbar-center'));
		} else if ($thisLink.parents('.dropdown').length == 0 && $thisLink.hasClass('zanaya-menu-link-right')) {
			$thisLink.appendTo(nav.find('.navbar-nav.navbar-right'));
		}
	});

	// centered logo support
	if (nav.hasClass('centered-logo')) {
		// this needs to depend on the position of the links
		nav.find('.zanaya-multi-nav-logo').addClass('navbar-brand-center');
		// if links are also centered add margin-top to avoid overlapping the logo.
		if (nav.find('.zanaya-menu-link-center').length > 0) {
			nav.find('#nav-links-wrap').css('margin-top', nav.height() + 'px');
		}
	}

	// right sided logo
	if (nav.hasClass('right-sided-logo')) {
		nav.find('.navbar-header').addClass('navbar-left').addClass('navbar-right');
	}

	/* ------------------  HEADER AFFIX  ------------------ */

	nav.parent().prepend('<div class="nav-placeholder hidden" style="height: ' + nav.height() + 'px"></div>');
	var navPlaceholder = nav.parent().find('.nav-placeholder');

	var additionalOffset = 0,
		affixEffect = '';

	if (nav.attr('data-affix-effect') == 'slidedown') {
		additionalOffset = 400;
		affixEffect = 'sticky-slide-down';
	}

	$('.affix-top').affix({
		offset: {
			top: function(thisNav) { // distance of between element and top page         
				var navOffsetTop = $(thisNav).offset().top;
				return (this.top = navOffsetTop + additionalOffset);
			}
		}
	}).on('affix.bs.affix', function() {

		if ( nav.hasClass('collapsed') ) {
			return; // nav is open and links displayed.
		}

		navPlaceholder.removeClass('hidden');
		nav.addClass('zanaya-sticky-nav ' + affixEffect).find('.navbar-brand').addClass('zanaya-sticky-nav');
		nav.find('.navbar-nav li a').addClass('zanaya-sticky-nav');
		nav.parent().find('.zanaya-cart-container').addClass('zanaya-sticky-nav');

		if (!$_window.scrollTop()) return false;
	}).on('affix-top.bs.affix', function(e) {

		if (0 != $_window.scrollTop()) { // prevent return to non-affix mode too early - usefull when the additional offset is used.
			e.preventDefault();
			return false;
		}

		navPlaceholder.addClass('hidden');
		nav.removeClass('zanaya-sticky-nav ' + affixEffect).find('.navbar-brand').removeClass('zanaya-sticky-nav');
		nav.find('.navbar-nav li a').removeClass('zanaya-sticky-nav');
		nav.parent().find('.zanaya-cart-container').removeClass('zanaya-sticky-nav');
	});

	/* ------------------  SCROLL TO ------------------ */

	// scroll to top
	var scrollToTopElement = $('.zanaya-scrolltop');
	if (scrollToTopElement.length > 0) {
		scrollToTopElement.removeAttr('id'); // revmoe scroll-to-top id to make sure can be made visible 
		if ($(document).height() > $_window.height()) {
			scrollToTopElement.hide(); // when the new content is loaded - hide scroll to top if the content is long enough
		}

		var checkScrollToTop = debounce(function() {
			if ($_window.scrollTop() > 50) {
				$('.zanaya-scrolltop:hidden').stop(true, true).fadeIn();
			} else {
				scrollToTopElement.stop(true, true).fadeOut();
			}
		}, 50); // throttle by 50ms.

		window.addEventListener('scroll', checkScrollToTop);

		$('.zanaya-scroll').on('click', function(e) {
			e.preventDefault();
			e.stopPropagation();
			e.stopImmediatePropagation();
			$('.zanaya-sticky').addClass('sticky-disabled');
			history.pushState(null, null, ' '); // remove hash.
			setTimeout(function() {
				$('html, body').animate({
					scrollTop: html.offset().top
				}, 1000, function() {
					$('.zanaya-sticky').removeClass('sticky-disabled');
				});
			}, 50);
			return false;
		});

	}


	function linkListers() {

		$('a').not('.comment-reply-link').not('.ajax_add_to_cart').not('.remove').on('click', function(event) {
			var thisLink = $(this);
			if ( thisLink.hasClass('unlisten') || thisLink.parent().hasClass('unlisten') ) {
				// do not attach a listener to links or link parents with this class. 
				// We can use this with menu links to allow control + click to open a new tab.
				return; 
			} else if (this.getAttribute('data-href-target') == '_modal') {
				event.preventDefault();
				openModalPopup(this.getAttribute('href')); // modal links                       
			} else if (this.getAttribute('data-href-target') == '_modal_full') {
				event.preventDefault();
				openModalPopup(this.getAttribute('href'), 'full'); // modal links                       
			}
			 else if (this.getAttribute('data-lightbox') != undefined) { // open in lightbox
				event.preventDefault();
				if (typeof openInZanayaLightbox === 'function') {
					openInZanayaLightbox(this);
				}
			} else if (this.getAttribute('data-togglebar') == 'true') {
				event.preventDefault();
				var thisParent = $(this).parent(),
					toggleBarWrap = thisParent.find('.toggle-bar-wrap'),
					toggleBarIcon = thisParent.find('.toggle-bar-icon');
				if (toggleBarWrap.hasClass('active-bar')) {
					toggleBarWrap.removeClass('active-bar');
					toggleBarIcon.removeClass('fa-minus').addClass('fa-plus');
				} else {
					toggleBarWrap.addClass('active-bar');
					toggleBarIcon.removeClass('fa-plus').addClass('fa-minus');
				}
			} else {
				event.preventDefault();
				checkHash(this, 'a', event);
			}
		});

		// button links
		$('[data-btn-href]').on('click', function(event) {
			var thisTarget = this.getAttribute('data-href-target'),
					thisHref = this.getAttribute('data-btn-href'),
					numericHref = /^\d+$/.test(thisHref);
			if ( thisTarget == '_blank') { // open in new window
				if ( true == numericHref )  {
					window.open('?p='+thisHref);
				} else {
					window.open(thisHref);
				}
			} else if (thisTarget == '_modal') { // open in modal window
				openModalPopup(thisHref);
			} else if (thisTarget == '_modal_full') { // open in modal window - full mode.
				openModalPopup(thisHref, 'full');
			}
			 else {
					if (thisHref.indexOf('#') !== 1) {
						checkHash(this, 'button', event);
					} else {
					if ( true == numericHref )  {
						window.location.href = '?p='+thisHref;
					} else {
						window.location.href = thisHref;
					}
				}
			}
		});

		$('button.open-in-lightbox').not('[data-btn-href]').on('click', function(){
			if (this.getAttribute('data-lightbox') != undefined) { // open in lightbox
				event.preventDefault();
				if (typeof openInZanayaLightbox === 'function') {
					openInZanayaLightbox(this);
				}
			}	
		});

	}

	linkListers();

	// set nav links active during scrolling       
	var spiedSections = $('[data-scroll-id]');
	if (spiedSections.length > 0) {
		navHeight = nav.outerHeight();
		var initScrollId = debounce(function() {
			var curPos = $_window.scrollTop(),
				navLinks = nav.find('a');
			spiedSections.each(function() {
				var thisSection = $(this);
				if ( '""' == thisSection.attr('data-scroll-id')) {
					return false;
				}
				var top = thisSection.offset().top - navHeight,
					bottom = top + thisSection.outerHeight(),
					spiedLink = nav.find('a[href="#' + thisSection.attr('data-scroll-id') + '"]');
				if (curPos >= top && curPos <= bottom) {
					// nav links active state
					if (spiedLink.length > 0) {
						spiedSections.removeClass('active');
						thisSection.addClass('active');
						navLinks.removeClass('active');
						spiedLink.addClass('active');
					}
				}
			});
		}, 10); // throttle by 10ms.
		window.addEventListener('scroll', initScrollId);
	}

	// check if url has a hash once page is loaded
	if (window.location.hash) {
		var link = $('[href="' + window.location.hash + '"');
		if (link.length > 0) {
			checkHash(link[0], 'a');
		}
	}

	function checkHash(el, node, event) {

		var $thisEl = $(el),
			elDataScrollID, hash, href;

		if (node == 'a') {
			href = el.getAttribute('href');
			if (href != undefined && href != null && href.charAt(0) == '#') {
				hash = el.hash;
				elDataScrollID = hash.replace('#', '');
			}
		} else { // buton
			href = el.getAttribute('data-btn-href');
			if (href != undefined && href != null && href.charAt(0) == '#') {
				hash = href;
				elDataScrollID = hash.replace('#', '');
			}
		}

		var elByScrollId = body.find('[data-scroll-id="' + elDataScrollID + '"]');

		if (hash !== undefined && hash !== '') { // make sure el.hash has a value before overriding default behavior

			var hashExcludeArray = ['#tab-description', '#tab-additional_information', '#tab-reviews'];

			if ($.inArray(hash, hashExcludeArray) !== -1) {
				return;
			}

			// Prevent default anchor click behavior
			if (event != undefined) {
				event.preventDefault();
			}

			if ($thisEl.hasClass('zanaya-carousel-control')) {
				return;
			}
		
			if (nav.length == 0) { // no nav

				if (elByScrollId.length > 0) {
					$('html, body').animate({
						scrollTop: elByScrollId.offset().top
					}, 800, function() {
						// Add hash (#) to URL when done scrolling (default click behavior)
						window.location.hash = hash;
					});
				}
			} else { // nav is found 

				var zanayaDataUtility = $('#zanaya-data-utility'); // an invisible element we can store data in for calculation purposed
				if (zanayaDataUtility.length == 0) {
					body.append('<div id="zanaya-data-utility" style="visibility:0"></div>');
					zanayaDataUtility = $('#zanaya-data-utility'); // cache var as soon as it's added to the DOM
				}

				var thisNav;
				if ($thisEl.parents('nav').length == 0) { // clicked on link has no nav parent - use first nav found for offset
					thisNav = nav.first();
				} else {
					thisNav = $thisEl.parents('nav'); // use nav parent of clicked on element
				}

				// close collapsed nav if open before scrolling - unless it's a dropdown link
				if (!$thisEl.hasClass('dropdown-toggle')) {
					if ($(thisNav).find('.collapsed-mode').length > 0) {
						toggleNav();
					}
				}

				var regularNavHeight = 0,
					affixNavHeight = 0;

				if (!thisNav.parents('.zanaya-section-group').hasClass('nav-on-top')) {
					// get regular & affix nav size by cloning (transitions must be removed to get the correct height of affix mode)
					thisNav.clone().attr('id', 'TEMP-NAV-ID').removeClass('transitions').appendTo(zanayaDataUtility);
					regularNavHeight = zanayaDataUtility.find('#TEMP-NAV-ID').removeClass('affix').outerHeight();
					affixNavHeight = zanayaDataUtility.find('#TEMP-NAV-ID').addClass('affix').outerHeight();
					zanayaDataUtility.html(''); // clear data-utility
				}

				var navOffset = regularNavHeight - 1; // (-1px safety correction)

				if (windowWidth < 768) {
					navOffset = regularNavHeight - 10;
				} else if (windowWidth < 1199) {
					navOffset = regularNavHeight - 5;
				}
				// scroll to element
				if (elByScrollId.length > 0) {

					if (true == scrollSnapParent) {
						// remove class to allow scrolling.
						content.removeClass('scroll-snap-parent');
					}

					$('.zanaya-sticky').addClass('sticky-disabled');

					// CASE 1: Nav is currently in regular mode or fixed top mode
					if (!thisNav.hasClass('zanaya-sticky-nav')) {

						$('html, body').animate({
							scrollTop: elByScrollId.offset().top - navOffset
						}, 800, function() {

							// continue scrolling if nav goes affix during scroll with 400 speed scroll
							if (thisNav.hasClass('zanaya-sticky-nav')) {
								navOffset = affixNavHeight - 1; // (-1px safety correction) 
								$('html, body').animate({
									scrollTop: elByScrollId.offset().top - navOffset
								}, 400, function() {
									$('.zanaya-sticky').removeClass('sticky-disabled');
								});
							}
							// Add hash (#) to URL when done scrolling (default click behavior)
							window.location.hash = hash;
							thisNav.find('a').removeClass('active');
							$thisEl.addClass('active');

							if (!thisNav.hasClass('zanaya-sticky-nav')) {
								$('.zanaya-sticky').removeClass('sticky-disabled');
							}
						});

					} // CASE 2: Nav is currently in sticky mode (affixed)
					else {
						navOffset = affixNavHeight - 1; // (-1px safety correction)
						if (windowWidth < 768) {
							navOffset = regularNavHeight - 10;
						} else if (windowWidth < 1199) {
							navOffset = regularNavHeight - 5;
						}
						$('html, body').animate({
							scrollTop: elByScrollId.offset().top - navOffset
						}, 800, function() {
							$('.zanaya-sticky').removeClass('sticky-disabled');
						});
						thisNav.find('a').removeClass('active');
						$thisEl.addClass('active');
						window.location.hash = hash;
					}

				} else { // if no data-scroll id element is found - execute link. (exclude accordion trigger)
					if (hash.indexOf('accordion_trigger') !== -1) {
						return false;
					}
					var numericHref = /^\d+$/.test(href);
					if ( true == numericHref )  {
						window.location.href = '?p='+href;
					} else {
						window.location.href = href;
					}
				}
			}
		} else {
			// if link doesn't start with # - execute the link
			if (href != undefined && href != null && href != '') {

				if ( $(el).parent().hasClass('menu-item-has-children') ) {
					var thisTarget = $(event.target);
					if ( thisTarget.hasClass('nested-children-mobile-toggle') ) {
						$('.menu-item a').removeClass('active'); // remove active class from all links.
						return false;
					}		
				}

				var numericHref = /^\d+$/.test(href),
						redirectWindow = '';
				if ('_blank' == el.getAttribute('target')) {
					if ( true == numericHref )  {
						redirectWindow = window.open('?p='+href, '_blank').location;
					} else {
						redirectWindow = window.open(href, '_blank').location;					
					} 
					redirectWindow.location;
				} else {
					// prevent archored links from opening sub-menus (while new page is loading).
					// this is most important in collapsed menu styles.
					$(el).parent().removeClass('open');
					// show preloader before navigating to newpage.
					// preloader.removeClass('preloader-slide-up');
					if ( true == numericHref )  {
						window.location.href = '?p='+href;
					} else {
						window.location.href = href;
					}

				}
			}
		}
	}

	/* ------------------  SCROLL FOLLOW  ------------------ */

	var scrollFollow = $('.scroll-follow'),
		curSidebarOffsetTop = 0,
		scrollFollowAnimating = false;

	if (scrollFollow.length) {
		navHeight = nav.outerHeight();		
		var initScrollFollow = debounce(function() {
			clearTimeout($.data(window, 'scrollTimer'));
			$.data(window, 'scrollTimer', setTimeout(function() {
				// reset margin top so sidebar position can be accurately messured.
				if (false == scrollFollowAnimating) {
					scrollFollow.css('margin-top', '0');
				}
				var curPos = $(this).scrollTop();
				if (scrollFollow.hasClass('zanaya-sticky')) {
					if ($('#primary').offset().top < scrollFollow.offset().top) {
						scrollFollow.css('top', navHeight + 50 + 'px');
					} else {
						scrollFollow.css('top', '');
					}
				} else {
					if (curPos > scrollFollow.offset().top && false == scrollFollowAnimating) {
						var offset = 50;
						scrollFollowAnimating = true;
						scrollFollow.animate({
							marginTop: (curPos - scrollFollow.offset().top + navHeight + offset) + 'px',
						}, 350, function() {
							scrollFollowAnimating = false;
						});
					} else {
						if (false == scrollFollowAnimating) {
							scrollFollow.css('margin-top', '0');
						}
					}
				}
			}, 0));
		}, 10); // throttle by 10 ms;

		window.addEventListener('scroll', initScrollFollow);

	}


	/* ------------------  MODAL ------------------ */


	function openModalPopup(contentUrl, width) {

		var _zanayaModalPopup = $('#zanaya-modal-popup'),
			_modalPopupHeader = $('#modal-popup-header'),
			_modalPopupHtml = $('#modal-popup-html'),
			_modalPopupContent = $('#modal-popup-content');

		_modalPopupContent.css({'border': '', 'box-shadow': ''});	// restore defaults.
		_zanayaModalPopup.css('background-color', ''); // restore defaults.

		if ( 'full' == width ) {
			_zanayaModalPopup.addClass('fullscreen');
		}

		_modalPopupHtml.html(''); // clear previous content
		_modalPopupHeader.hide();

		_zanayaModalPopup.addClass('modal-active').show();

		if (!isNaN(contentUrl)) { // if content url is a post id number
			$.ajax({
				url: splent_wp_params.ajax_url,
				type: 'POST',
				data: {
					'action': 'splent_get_page_content',
					'post_id': contentUrl,
					'nonce': splent_wp_params.ajax_nonce
				},
				cache: false,
				success: function(data) {

					_modalPopupHtml.html(data);

					activateLazyload();

					// remove blank p tags on zanaya-builder pages.
					_modalPopupHtml.find('p').each(function() {
						var $this = $(this);
						if ($this.html().replace(/\s|&nbsp;/g, '').length == 0) {
							$this.remove();
						}
					});
					// remove line br on zanaya builder pages.
					_modalPopupHtml.find('br').not('.zanaya-br').remove();

					_modalPopupHtml.show();  // show content

					_modalPopupHeader.show();
					
					/* ------------------  ANIMATIONS  ------------------ */

					if ($().restartAnimation) { // check if the method exists before calling animations

						var animatePlusInstance = AnimatePlus.getInstance();

						var groupIndex = 100; // set it pretty high to avoid clashing with the host page animations.
						_modalPopupHtml.find('[data-animation-group]').each(function() {

							$(this).attr('data-animation-group', '_'+groupIndex).addClass('pre-anim-opac-0 animated');
							var groupName = $(this).attr('data-animation-group');

   						animatePlusInstance.appendToAnimatePlus(this, groupName, animatePlusInstance); // append to AnimatePlus object.

							var group = animatePlusInstance.getMap()[groupName];
							group.restart();

							groupIndex++; // increment group index.

						});
					}
					//
		
					_modalPopupContent.addClass('visible');
					// parse multi-carousels
					var multiCaoursels = _modalPopupHtml.find('.zanaya-carousel.multi-carousel');
					if (multiCaoursels.length > 0) {
						if ($().zanayaMultiCarousel) { // load carousel in modals only if method exists
							multiCaoursels.zanayaMultiCarousel();
						}
					}
				}
			});

		} else { // if contentUrl is an actual url. -- needs more work like validation of url and proper loading.   
			_modalPopupHtml.load(contentUrl, function(e) {
				_modalPopupContent.find('#zanaya-preloader').hide();
				_modalPopupHeader.show();
				// show content
				_modalPopupContent.addClass('visible');
				// parse multi-carousels
				var multiCaoursels = _modalPopupHtml.find('.zanaya-carousel.multi-carousel');
				if (multiCaoursels.length > 0) {
					if ($().zanayaMultiCarousel) { // load carousel in modals only if method exists
						multiCaoursels.zanayaMultiCarousel();
					}
				}
			});
		}

		// close modal button
		$('#modal-popup-close').on('click', function(event) {
			event.preventDefault();
			_zanayaModalPopup.removeClass('modal-active fullscreen').hide(400);
			_modalPopupContent.removeClass('visible');
			_modalPopupHtml.html('');
			return false;
		});

		// close modal when clicking outside of modal area
		$('#modal-popup-close-block').on('click', function(event) {
			event.preventDefault();
			_zanayaModalPopup.removeClass('modal-active fullscreen').hide(400);
			_modalPopupContent.removeClass('visible');
			_modalPopupHtml.html('');
			return false;
		});
	}


	// modal window - close when clicking outside
	$(document).on('click', '#modal-popup-content', function(e) {
		e.preventDefault();
		e.stopPropagation();
		e.stopImmediatePropagation();

		if ( e.target.className.indexOf('external-content-post-id') > -1 ) {
			$('#zanaya-modal-popup').removeClass('modal-active fullscreen').hide(400);
			$('#modal-popup-content').removeClass('visible');
			$('#modal-popup-html').html('');
			return false;				
		}
	});


	/* ------------------  FORM ELEMENTS  ------------------ */

	// Form element: text input with left and right buttons
	$('.zanaya-btn-minus').on('click', function(e) {
		e.stopImmediatePropagation();
		var $thisInput = $(this).parents('.input-group').find('input');
		if ($thisInput.val() > 0) { // prevent negative values
			$thisInput.val(parseInt($thisInput.val(), 10) - 1);
		}
	});

	$('.zanaya-btn-plus').on('click', function(e) {
		e.stopImmediatePropagation();
		var $thisInput = $(this).parents('.input-group').find('input');
		$thisInput.val(parseInt($thisInput.val(), 10) + 1);
	});

	// Form - file button
	$('.input-file-btn').on('click', function() {
		$(this).parent().find('input').trigger('click');
	});

	// Form - dropdown keep sticky
	$('.dropdown input').on({
		focus: function() {
			$(this).parents('.dropdown').addClass('open-sticky');
		},
		blur: function() {
			$(this).parents('.dropdown').removeClass('open-sticky');
		}
	});

	/* ------------------  VIDEO SLIDER ------------------ */

	$('.zanaya-carousel').find('.item.active').find('video').each(function() {

		var thisVideo = $(this),
				preload = thisVideo.attr('preload');

			// allow lazy loading of videos.	
			if (undefined == preload || 'none' != preload )	{
			// run first video on load if it's has active class
			if (thisVideo.attr('data-name') == 'video') {

				var playPromise = thisVideo.get(0).play();

				if (playPromise !== undefined) {
					playPromise.then(function(_) {
						// auto play started
					}).catch(function(error) {
						// auto play was prevented by the browser
						// muted video to allow video to play
						thisVideo.prop('muted', 'muted');
						thisVideo.get(0).play();
					});
				}
			}			
		}	
	});


	function initSliderListeners(el) {

		var thisCarousel = $(el);
		var thisCaourselById = $('#' + thisCarousel.attr('id'));

		// Check is slider has videos 
		var allItems = thisCaourselById.find('.item');
		var videos = allItems.find('video');

		if (videos.length != 0) {

			// Give all Videos ID equal to the item index number
			for (var i = 0; i < allItems.length; i++) {
				$(allItems[i]).find('video').attr('id', 'video-' + thisCarousel.attr('id') + '_' + i);
			}

			thisCaourselById.on('slide.bs.carousel', function(e) {

				// Pause all videos
				thisCaourselById.find('video').each(function() {
					var thisVideo = $(this);
					thisVideo.get(0).pause();
				});

				var prevIndex = thisCaourselById.find('.active').index();
				var currentIndex = $(e.relatedTarget).index();

				var $video = $('#video-' + thisCarousel.attr('id') + '_' + currentIndex);
				if ($video.attr('data-name') == 'video') {
					$video.get(0).play();
				}
			});
			thisCaourselById.carousel('pause');

			//wait until next slide finishes loading 
			thisCaourselById.on('slid.bs.carousel', function(e) {
				e.stopImmediatePropagation(); // added dec 4th

				if ($().restartAnimation) { // check if the method exists before calling animations
					// check if currently active slider item has animation set to reset when off screen
					thisCaourselById.find('.item.active').find('[data-animation-reset-offscreen="true"]').each(function() {
						var groupName = thisCaourselById.attr('data-animation-group');
						var group = AnimatePlus.getInstance().getMap()[groupName];
						group.restart();
					});
				}

			});

		}

		if ($().restartAnimation) { // check if the method exists before calling animations
			thisCaourselById.on('slid.bs.carousel', function(e) {
				e.stopImmediatePropagation();
				// get previous slide (the slide that already finished) and reset it's animation group
				var slideFrom = $(e.relatedTarget).prev().index();

				if ( thisCaourselById.hasClass('fade') || thisCaourselById.hasClass('zanaya-elastic') || thisCaourselById.hasClass('diagonal') ) {
					if ( thisCaourselById.hasClass('diagonal') ) {
						thisCaourselById.find('.item').eq(slideFrom).find('[data-animation-group]').addClass('pre-anim-opac-0');
					}
					// ensure fade, strech and diagonal animations trigger after slide finishes by increasing the counter +1.
					slideFrom = slideFrom + 1;
				}

				var prevSlide = thisCaourselById.find('.item').eq( slideFrom ),
					  prevSlideAnimationGroup = prevSlide.find('[data-animation-group]').attr('data-animation-group');

				if (undefined != prevSlideAnimationGroup) {
					var thisGroup = AnimatePlus.getInstance().map[prevSlideAnimationGroup];
					thisGroup.reset(thisGroup);
					thisGroup.animate(1); // fire animation after slide has appeared in full
				}

			});
		}
	}
	initSliderListeners($('.zanaya-carousel'));

	/* ------------------  ZANAYA VIDEO PLAYER ------------------ */

	$('video').each(function() {

		var thisVideo = $(this);

		if (thisVideo.attr('autoplay') != undefined) {
			thisVideo.parent().find('.playpause').css('display', 'none');
		}

		thisVideo.parent().on('click', function() {
			if (thisVideo.children('.video').get(0) == undefined) {
				thisVideo = thisVideo.parent();
			} // prevent error with video sliders
			var thisVideoPlayPause = thisVideo.children('.playpause'),
					thisVideoVid = thisVideo.children('.video').get(0);
			thisVideoPlayPause.removeClass('fadeout'); // safety.
			if ( undefined != thisVideoVid ) {
				if (thisVideoVid.paused) {
					thisVideoVid.play();
					thisVideoPlayPause.fadeOut();
					if (thisVideo.hasClass('activate-stop-fade')) {
						thisVideo.removeClass('stopfade');
					}
				} else {
					thisVideoVid.pause();
					thisVideoPlayPause.fadeIn();
					if (thisVideo.hasClass('activate-stop-fade')) {
						thisVideo.addClass('stopfade');
					}
				}				
			}
		});
	});


	function startZanayaProgressBar(el) {

		var progressElement = $(el);

		var thisProgressBar = progressElement.find('.progress-bar');
		thisProgressBar.css({
			'visibility': '0',
			'width': '0'
		}); // prepare for another progress bar width animation

		var inview = new Waypoint.Inview({ // events: enter, entered, exit, exited
			element: el,
			enter: function(direction) {
				if (progressElement.attr('data-reset-offscreen') != 'false' || !(progressElement.hasClass('animated-once'))) { // as opposed to true or undefined
					thisProgressBar.css('width', '0').animate({
						easing: 'linear', // 'swing' '_default'
						width: thisProgressBar.attr('aria-valuenow') + '%'
					}, {
						queue: false,
						duration: 100
					});

					if (!(progressElement.hasClass('animated-once'))) {
						progressElement.addClass('animated-once');
						inview.destroy(); // remove listener.
					} // this class assures that the count will accure one time undless data-reset-ofscreen is set to true      
				} else {
					thisProgressBar.css('width', thisProgressBar.css('width')); // needed for redo / undo to avoid loosing the width when data-reset-offscreen is set to false
				}
			},
			exited: function(direction) {
				if (progressElement.attr('data-reset-offscreen') != 'false' || !(progressElement.hasClass('animated-once'))) { // as opposed to true or undefined
					thisProgressBar.css({
						'visibility': '0',
						'width': '0'
					}); // prepare for another progress bar width animation
				}
			}
		});

	}


	/* ------------------  COUNTERS ------------------ */

	function startZanayaCounter(el) {

		var counterElement = $(el);

		var easingFunctions = {
			easeOutExpo: function(t, b, c, d) {
				return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
			},
			outQuintic: function(t, b, c, d) {
				var ts = (t /= d) * t;
				var tc = ts * t;
				return b + c * (tc * ts + -5 * ts * ts + 10 * tc + -10 * ts + 5 * t);
			},
			outCubic: function(t, b, c, d) {
				var ts = (t /= d) * t;
				var tc = ts * t;
				return b + c * (tc + -3 * ts + 3 * t);
			}
		};

		// start counter
		var inview = new Waypoint.Inview({
			element: el,
			enter: function(direction) {
				if (counterElement.attr('data-reset-offscreen') != 'false' || !(counterElement.hasClass('animated-once'))) { // as opposed to true or undefined
					var startVal = counterElement.attr('data-counter-start');
					startVal = Number(startVal.replace(',', '').replace(' ', ''));

					var endVal = counterElement.attr('data-counter-end');
					endVal = Number(endVal.replace(',', '').replace(' ', ''));

					var separator = counterElement.attr('data-counter-separator'),
							decimals = counterElement.attr('data-counter-decimals'),
							duration = counterElement.attr('data-counter-duration'),
							prefixVal = counterElement.attr('data-counter-prefix'),
							suffixVal = counterElement.attr('data-counter-suffix'),
							startDelay = counterElement.attr('data-counter-delay') || '';

					if ( startDelay.indexOf('.') > -1 ) {
						startDelay = startDelay * 1000; // convert to seconds
					}		

					var counterOptions = {
						useEasing: true,
						easingFn: easingFunctions.easeOutExpo, // easeOutExpo; outQuintic;  outCubic
						useGrouping: true,
						separator: typeof prefixVal === 'undefined' ? ',' : separator,
						decimal: '.',
						prefix: typeof prefixVal === 'undefined' ? null : prefixVal,
						suffix: typeof suffixVal === 'undefined' ? null : suffixVal,
						startDelay: typeof startDelay === 'undefined' ? 0 : startDelay,
					};

          if ( $(el).hasClass('spin') ) {
          	// spin counter
         		counterOptions.decimals = decimals;
          	counterOptions.duration = Number(duration) * 1000 || 1200;
          	$(el).zanayaSpinCounter(counterOptions);
          } else {
          	// regular counter
						var counter = new CountUp(el, startVal, endVal, decimals, duration, counterOptions); // target, start, end, decimal, duration, options
						counter.start();
          }

					if (!(counterElement.hasClass('animated-once'))) {
						counterElement.addClass('animated-once');
						inview.destroy(); // remove listener.
					} // this class assures that the count will accure one time undless data-reset-ofscreen is set to true

				}
			}
		});
	}

	/* ------------------  COUNTDOWNS ------------------ */

	$('.zanaya-countdown').each(function(){
		var countdownEl = $(this),
				countdownTo = countdownEl.attr('data-countdown-date');
		if ($().countdown) {
			countdownEl.countdown(countdownTo, function(event) {
				countdownEl.find('.zanaya-countdown-years').html(event.strftime('%Y'));
				countdownEl.find('.zanaya-countdown-weeks').html(event.strftime('%w'));
				countdownEl.find('.zanaya-countdown-days').html(event.strftime('%D'));
				countdownEl.find('.zanaya-countdown-hours').html(event.strftime('%H'));
				countdownEl.find('.zanaya-countdown-minutes').html(event.strftime('%M'));
				countdownEl.find('.zanaya-countdown-seconds').html(event.strftime('%S'));
			});
		}
	});

	/* ------------------  TEXT ANIMATION ------------------ */

	function startZanayaTextAnimation(el) {

		var fx = el.getAttribute('data-effect'),
			delay = el.getAttribute('data-delay') || 0;

		// start animation
		var inview = new Waypoint.Inview({
			element: el,
			enter: function(direction) {
				if (!($(el).hasClass('animated-once'))) { // animate once.
					setTimeout(function() {
						var txt = new ZanayaTextFx(el);
						txt.show(fx);
						$(el).addClass('animated-once');
						inview.destroy(); // remove listener.
					}, (delay * 1000));
				}
			}
		});
	}


	/* ------------------  MASONRY GRID ------------------ */

	/**
	 * Licensed under the MIT license.
	 */

	// GridLoaderFx obj.
	function GridLoaderFx(el, options) {
		this.el = el;
		this.items = this.el.querySelectorAll('.zanaya-masonry-item');
	}

	// Effects.
	GridLoaderFx.prototype.effects = {
		'Hapi': {
			animeOpts: {
				duration: function(t, i) {
					return 600 + i * 75;
				},
				easing: 'easeOutExpo',
				delay: function(t, i) {
					return i * 50;
				},
				opacity: {
					value: [0, 1],
					easing: 'linear'
				},
				scale: [0, 1]
			}
		},
		'Amun': {
			// Sort target elements function.
			sortTargetsFn: function(a, b) {
				var aBounds = a.getBoundingClientRect(),
					bBounds = b.getBoundingClientRect();

				return (aBounds.left - bBounds.left) || (aBounds.top - bBounds.top);
			},
			animeOpts: {
				duration: function(t, i) {
					return 500 + i * 50;
				},
				easing: 'easeOutExpo',
				delay: function(t, i) {
					return i * 20;
				},
				opacity: {
					value: [0, 1],
					duration: function(t, i) {
						return 250 + i * 50;
					},
					easing: 'linear'
				},
				translateY: [400, 0]
			}
		},
		'Kek': {
			sortTargetsFn: function(a, b) {
				return b.getBoundingClientRect().left - a.getBoundingClientRect().left;
			},
			animeOpts: {
				duration: 800,
				easing: [0.1, 1, 0.3, 1],
				delay: function(t, i) {
					return i * 20;
				},
				opacity: {
					value: [0, 1],
					duration: 600,
					easing: 'linear'
				},
				translateX: [-500, 0],
				rotateZ: [15, 0]
			}
		},
		'Isis': {
			animeOpts: {
				duration: 900,
				elasticity: 500,
				delay: function(t, i) {
					return i * 15;
				},
				opacity: {
					value: [0, 1],
					duration: 300,
					easing: 'linear'
				},
				translateX: function() {
					return [anime.random(0, 1) === 0 ? 100 : -100, 0];
				},
				translateY: function() {
					return [anime.random(0, 1) === 0 ? 100 : -100, 0];
				}
			}
		},
		'Montu': {
			perspective: 800,
			origin: '50% 0%',
			animeOpts: {
				duration: 1500,
				elasticity: 400,
				delay: function(t, i) {
					return i * 75;
				},
				opacity: {
					value: [0, 1],
					duration: 1000,
					easing: 'linear'
				},
				rotateX: [-90, 0]
			}
		},
		'Osiris': {
			perspective: 3000,
			animeOpts: {
				duration: function() {
					return anime.random(500, 1000);
				},
				easing: [0.2, 1, 0.3, 1],
				delay: function(t, i) {
					return i * 50;
				},
				opacity: {
					value: [0, 1],
					duration: 700,
					easing: 'linear'
				},
				translateZ: {
					value: [-3000, 0],
					duration: 1000
				},
				rotateY: ['-1turns', 0]
			}
		},
		'Satet': {
			animeOpts: {
				duration: 800,
				elasticity: 600,
				delay: function(t, i) {
					return i * 100;
				},
				opacity: {
					value: [0, 1],
					duration: 600,
					easing: 'linear'
				},
				scaleX: {
					value: [0.4, 1]
				},
				scaleY: {
					value: [0.6, 1],
					duration: 1000
				}
			}
		},
		'Atum': {
			sortTargetsFn: function(a, b) {
				var docScrolls = {
						top: document.body.scrollTop + document.documentElement.scrollTop
					},
					y1 = window.innerHeight + docScrolls.top,
					aBounds = a.getBoundingClientRect(),
					ay1 = aBounds.top + docScrolls.top + aBounds.height / 2,
					bBounds = b.getBoundingClientRect(),
					by1 = bBounds.top + docScrolls.top + bBounds.height / 2;

				return Math.abs(y1 - ay1) - Math.abs(y1 - by1);
			},
			perspective: 1000,
			origin: '50% 0%',
			animeOpts: {
				duration: 800,
				easing: [0.1, 1, 0.3, 1],
				delay: function(t, i) {
					return i * 35;
				},
				opacity: {
					value: [0, 1],
					duration: 600,
					easing: 'linear'
				},
				translateX: [100, 0],
				translateY: [-100, 0],
				translateZ: [400, 0],
				rotateZ: [10, 0],
				rotateX: [75, 0]
			}
		},
		'Ra': {
			origin: '50% 0%',
			animeOpts: {
				duration: 500,
				easing: 'easeOutBack',
				delay: function(t, i) {
					return i * 100;
				},
				opacity: {
					value: [0, 1],
					easing: 'linear'
				},
				translateY: [400, 0],
				scaleY: [{
						value: [3, 0.6],
						delay: function(t, i) {
							return i * 100 + 120;
						},
						duration: 300,
						easing: 'easeOutExpo'
					},
					{
						value: [0.6, 1],
						duration: 1400,
						easing: 'easeOutElastic'
					}
				],
				scaleX: [{
						value: [0.9, 1.05],
						delay: function(t, i) {
							return i * 100 + 120;
						},
						duration: 300,
						easing: 'easeOutExpo'
					},
					{
						value: [1.05, 1],
						duration: 1400,
						easing: 'easeOutElastic'
					}
				]
			}
		},
		'Sobek': {
			animeOpts: {
				duration: 600,
				easing: 'easeOutExpo',
				delay: function(t, i) {
					return i * 100;
				},
				opacity: {
					value: [0, 1],
					duration: 100,
					easing: 'linear'
				},
				translateX: function(t, i) {
					var docScrolls = {
							left: document.body.scrollLeft + document.documentElement.scrollLeft
						},
						x1 = window.innerWidth / 2 + docScrolls.left,
						tBounds = t.getBoundingClientRect(),
						x2 = tBounds.left + docScrolls.left + tBounds.width / 2;

					return [x1 - x2, 0];
				},
				translateY: function(t, i) {
					var docScrolls = {
							top: document.body.scrollTop + document.documentElement.scrollTop
						},
						y1 = window.innerHeight + docScrolls.top,
						tBounds = t.getBoundingClientRect(),
						y2 = tBounds.top + docScrolls.top + tBounds.height / 2;

					return [y1 - y2, 0];
				},
				rotate: function(t, i) {
					var x1 = window.innerWidth / 2,
						tBounds = t.getBoundingClientRect(),
						x2 = tBounds.left + tBounds.width / 2;

					return [x2 < x1 ? 90 : -90, 0];
				},
				scale: [0, 1]
			}
		},
		'Ptah': {
			itemOverflowHidden: true,
			sortTargetsFn: function(a, b) {
				return b.getBoundingClientRect().left - a.getBoundingClientRect().left;
			},
			origin: '100% 0%',
			animeOpts: {
				duration: 500,
				easing: 'easeOutExpo',
				delay: function(t, i) {
					return i * 20;
				},
				opacity: {
					value: [0, 1],
					duration: 400,
					easing: 'linear'
				},
				rotateZ: [45, 0]
			}
		},
		'Bes': {
			revealer: true,
			revealerOrigin: '100% 50%',
			animeRevealerOpts: {
				duration: 800,
				delay: function(t, i) {
					return i * 75;
				},
				easing: 'easeInOutQuart',
				scaleX: [1, 0]
			},
			animeOpts: {
				duration: 800,
				easing: 'easeInOutQuart',
				delay: function(t, i) {
					return i * 75;
				},
				opacity: {
					value: [0, 1],
					easing: 'linear'
				},
				scale: [0.8, 1]
			}
		},
		'Seker': {
			revealer: true,
			revealerOrigin: '50% 100%',
			animeRevealerOpts: {
				duration: 500,
				delay: function(t, i) {
					return i * 50;
				},
				easing: [0.7, 0, 0.3, 1],
				translateY: [100, 0],
				scaleY: [1, 0]
			},
			animeOpts: {
				duration: 500,
				easing: [0.7, 0, 0.3, 1],
				delay: function(t, i) {
					return i * 50;
				},
				opacity: {
					value: [0, 1],
					duration: 400,
					easing: 'linear'
				},
				translateY: [100, 0],
				scale: [0.8, 1]
			}
		},
		'Nut': {
			revealer: true,
			revealerColor: '#1d1d1d',
			itemOverflowHidden: true,
			animeRevealerOpts: {
				easing: 'easeOutCubic',
				delay: function(t, i) {
					return i * 100;
				},
				translateX: [{
						value: ['101%', '0%'],
						duration: 400
					},
					{
						value: ['0%', '-101%'],
						duration: 400
					}
				]
			},
			animeOpts: {
				duration: 900,
				easing: 'easeOutCubic',
				delay: function(t, i) {
					return 400 + i * 100;
				},
				opacity: {
					value: 1,
					duration: 1,
					easing: 'linear'
				},
				scale: [0.8, 1]
			}
		},
		'Shu': {
			lineDrawing: true,
			animeLineDrawingOpts: {
				duration: 800,
				delay: function(t, i) {
					return i * 150;
				},
				easing: 'easeInOutSine',
				strokeDashoffset: [anime.setDashoffset, 0],
				opacity: [{
						value: [0, 1]
					},
					{
						value: [1, 0],
						duration: 200,
						easing: 'linear',
						delay: 500
					}
				]
			},
			animeOpts: {
				duration: 800,
				easing: [0.2, 1, 0.3, 1],
				delay: function(t, i) {
					return i * 150 + 800;
				},
				opacity: {
					value: [0, 1],
					easing: 'linear'
				},
				scale: [0.5, 1]
			}
		}
	};

	GridLoaderFx.prototype._render = function(effect) {
		// Reset styles.
		this._resetStyles();

		var self = this,
			effectSettings = this.effects[effect],
			animeOpts = effectSettings.animeOpts;

		if (effectSettings.perspective != undefined) {
			[].slice.call(this.items).forEach(function(item) {
				item.parentNode.style.WebkitPerspective = item.parentNode.style.perspective = effectSettings.perspective + 'px';
			});
		}

		if (effectSettings.origin != undefined) {
			[].slice.call(this.items).forEach(function(item) {
				item.style.WebkitTransformOrigin = item.style.transformOrigin = effectSettings.origin;
			});
		}

		if (effectSettings.lineDrawing != undefined) {
			[].slice.call(this.items).forEach(function(item) {
				// Create SVG.
				var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),
					path = document.createElementNS('http://www.w3.org/2000/svg', 'path'),
					itemW = item.offsetWidth,
					itemH = item.offsetHeight;

				svg.setAttribute('width', itemW + 'px');
				svg.setAttribute('height', itemH + 'px');
				svg.setAttribute('viewBox', '0 0 ' + itemW + ' ' + itemH);
				svg.setAttribute('class', 'grid__deco');
				path.setAttribute('d', 'M0,0 l' + itemW + ',0 0,' + itemH + ' -' + itemW + ',0 0,-' + itemH);
				path.setAttribute('stroke-dashoffset', anime.setDashoffset(path));
				svg.appendChild(path);
				item.parentNode.appendChild(svg);
			});

			var animeLineDrawingOpts = effectSettings.animeLineDrawingOpts;
			animeLineDrawingOpts.targets = this.el.querySelectorAll('.grid__deco > path');
			anime.remove(animeLineDrawingOpts.targets);
			anime(animeLineDrawingOpts);
		}

		if (effectSettings.revealer != undefined) {
			[].slice.call(this.items).forEach(function(item) {
				var revealer = document.createElement('div');
				revealer.className = 'grid__reveal';
				if (effectSettings.revealerOrigin != undefined) {
					revealer.style.transformOrigin = effectSettings.revealerOrigin;
				}
				if (effectSettings.revealerColor != undefined) {
					revealer.style.backgroundColor = effectSettings.revealerColor;
				}
				item.parentNode.appendChild(revealer);
			});

			var animeRevealerOpts = effectSettings.animeRevealerOpts;
			animeRevealerOpts.targets = this.el.querySelectorAll('.grid__reveal');
			animeRevealerOpts.begin = function(obj) {
				for (var i = 0, len = obj.animatables.length; i < len; ++i) {
					obj.animatables[i].target.style.opacity = 1;
				}
			};
			anime.remove(animeRevealerOpts.targets);
			anime(animeRevealerOpts);
		}

		if (effectSettings.itemOverflowHidden) {
			[].slice.call(this.items).forEach(function(item) {
				item.parentNode.style.overflow = 'hidden';
			});
		}

		animeOpts.targets = effectSettings.sortTargetsFn && typeof effectSettings.sortTargetsFn === 'function' ? [].slice.call(this.items).sort(effectSettings.sortTargetsFn) : this.items;
		anime.remove(animeOpts.targets);
		anime(animeOpts);
	};

	GridLoaderFx.prototype._resetStyles = function() {
		this.el.style.WebkitPerspective = this.el.style.perspective = 'none';
		[].slice.call(this.items).forEach(function(item) {
			var gItem = item.parentNode;
			item.style.opacity = 0;
			item.style.WebkitTransformOrigin = item.style.transformOrigin = '50% 50%';
			item.style.transform = 'none';

			var svg = item.parentNode.querySelector('svg.grid__deco');
			if (svg) {
				gItem.removeChild(svg);
			}

			var revealer = item.parentNode.querySelector('.grid__reveal');
			if (revealer) {
				gItem.removeChild(revealer);
			}

			gItem.style.overflow = '';
		});
	};

	var loaders = []; // fx loader instances.

	function applyGridFx(index, FxName) {
		loaders[index]._render(FxName);
	}


	function initZanayaMasonry(el) {

		initZanayaPackeryExpansion();

		var masonryElement = $(el),
			fxName = $(el).attr('data-effect'),
			keepOrder = $(el).attr('data-keep-order');

		if (undefined != fxName && '' != fxName && 'none' != fxName) {
			masonryElement.css('visibility', 'hidden'); // hide grid before loading fx.         
		}

		var gutter_compensation = true;

		if ( true == gutter_compensation ) {
			// gutter compensation for tall parallax
			masonryElement.find('.tall-parallax').each(function(){
				var this_item = $(this),
						this_gutter = parseInt( this_item.css('border-width'), 10),
						this_border = parseInt( this_item.find('.zanaya-masonry-col').css('border-width'), 10),
						dbl_gutter = ( this_gutter * 2 ) + ( this_border * 2 );
				this_item.find('.gsap-parallax').css('min-height', '+='+dbl_gutter+'px');
			});			
		}

		masonryElement.imagesLoaded(function() { // images loaded

			if ( 'true' != keepOrder ) { // use packery
				// initialize Packery
				var $grid = masonryElement.packery({
					itemSelector: '.zanaya-masonry-item',
					percentPosition: true,
					initLayout: false, // disable initial layout
					transitionDuration: 0, // no transition animation
				});

				// get from data-masonry-layout
				var initPositions;
				if (masonryElement.attr('data-masonry-layout') != undefined) {
					initPositions = decodeURIComponent(masonryElement.attr('data-masonry-layout'));
				}

				$grid.packery('initShiftLayout', initPositions, 'data-masonry-item-id');


				setTimeout(function() {
					$grid.packery('layout');
				}, 100); // assure items will load correctly on all devices

			} else { // use masonry
				var $grid = masonryElement.masonry({
					itemSelector: '.zanaya-masonry-item',
					percentPosition: true,
					transitionDuration: 0, // no transition animation
					horizontalOrder: true, // new!
				});

				setTimeout(function() {
					$grid.masonry('layout');
				}, 100); // assure items will load correctly on all devices
			}

			if (undefined != fxName && '' != fxName && 'none' != fxName) {
				var inview = new Waypoint.Inview({
					element: masonryElement,
					enter: function(direction) {

						if (!masonryElement.hasClass('visible')) { // single execution.

							setTimeout(function() {
								masonryElement.addClass('visible');
								masonryElement.css('visibility', 'visible');

								loaders.push(new GridLoaderFx(masonryElement[0]));
								var index = loaders.length - 1; // get last index.

								applyGridFx(index, fxName);
								inview.destroy(); // remove listener.

							}, 100);

						}

					},
					offset: {
						bottom: $(el).attr('data-offset-bottom') || 0
					}
				});
			}

			// lazy load support
			$grid.find('img.lazyload').not('.loaded').load(function() {
				// when an image inside the packery grid loads - trigger pckry to re layout the images
				if ( 'true' != keepOrder ) { // use packery
					$grid.packery('layout');
				} else { // use masonry
					$grid.masonry('layout');
				}	
			});

		});
	}

	function initZanayaPackeryExpansion() {

		// get JSON-friendly data for items positions
		Packery.prototype.getShiftPositions = function(attrName) {
			attrName = attrName || 'id';
			var _this = this;
			return this.items.map(function(item) {
				return {
					attr: item.element.getAttribute(attrName),
					x: item.rect.x / _this.packer.width
				};
			});
		};

		Packery.prototype.initShiftLayout = function(positions, attr) {

			if (!positions) { // if no initial positions, run packery layout
				this.layout();
				return;
			}
			if (typeof positions == 'string') { // parse string to JSON
				try {
					positions = JSON.parse(positions);
				} catch (error) {
					this.layout();
					return;
				}
			}

			// check that all items in the json array are in the DOM, and update json.
			for (var i = 0; i < positions.length; i++) {
				var selector = '[' + attr + '="' + positions[i].attr + '"]';
				if ($(selector).length == 0) {
					delete positions[i];
				}
			}

			attr = attr || 'id'; // default to id attribute
			this._resetLayout();
			// set item order and horizontal position from saved positions
			this.items = positions.map(function(itemPosition) {
				var selector = '[' + attr + '="' + itemPosition.attr + '"]';
				var itemElem = this.element.querySelector(selector);
				var item = this.getItem(itemElem);
				item.rect.x = itemPosition.x * this.packer.width;
				return item;
			}, this);
			this.shiftLayout();
		};
	}

	/* ------------------  PARALLAX  ------------------ */

	$('.zanaya-parallax').each(function() {
		var parllaxElement = $(this);
		parllaxElement.zanayaParallaxFx();
		parllaxElement.imagesLoaded(function() {
			$_window.trigger('resize'); // Refresh parallax
		});
	});


	/* ------------------  ACCORDIONS  ------------------ */

	var accordionToggle = $('.zanaya-accordion .accordion-toggle'),
		accordionPanel = $('.zanaya-accordion .accordion-panel'),
		accordionIndicator = $('.zanaya-accordion .toggle-indicator');

	accordionToggle.on('click', function() {
		var thisToggle = $(this);
		var thisAccordion = thisToggle.parents('.zanaya-accordion');

		var toggleOpenIcon = thisAccordion.attr('data-toggle-open');
		var toggleClosedIcon = thisAccordion.attr('data-toggle-closed');
		thisAccordion.find('.accordion-panel').removeClass('active');
		thisToggle.parents('.accordion-panel').addClass('active');

		thisAccordion.off('show.bs.collapse hide.bs.collapse').on({
			'show.bs.collapse': function(e) {
				$(e.target).prev().find('.toggle-indicator').toggleClass(toggleOpenIcon + ' ' + toggleClosedIcon);
			},
			'hide.bs.collapse': function(e) {
				$(e.target).prev().find('.toggle-indicator').toggleClass(toggleOpenIcon + ' ' + toggleClosedIcon);
			}
		});
	});

	// zanaya-accordion - allow clicking on whole panel
	accordionPanel.on('click', function(e) {
		var $thisTarget = $(e.target);
		if (!$thisTarget.hasClass('accordion-toggle')) {
			$thisTarget.find('.accordion-toggle').first().trigger('click');
		}
	});

	accordionIndicator.on('click', function(e) {
		$(this).parent().click();
	});


	/* ------------------  TABS  ------------------ */

	$('.z-bs-4 [data-toggle="tab"]').on('click', function() {
		var $thisTabLink = $(this);
		var $thisTabsParent = $thisTabLink.parents('.nav-tabs');
		$thisTabsParent.find('li').removeClass('active');
		$thisTabLink.parent().addClass('active');
	});


	/* ------------------  TABLES  ------------------ */

	if ($().responsiveTable) { // check if the method exists
		$('.zanaya-table').responsiveTable();
	}

	/* ------------------ MULTI ITEM CAROUSEL ------------------ */

	if ($().zanayaMultiCarousel) {
		var multiCarousels = $('.zanaya-carousel.multi-carousel');
		// load reveal effected images immediately.
		multiCarousels.find('img').each(function() {
			var img = $(this);
			if (img.hasClass('lazyload')) {
				img.removeClass('lazyload').attr('src', img.attr('data-src'));
			}
		});
		multiCarousels.zanayaMultiCarousel();
	}

  /* ------------------  SLIDER COUNTER ------------------ */

  $('.zanaya-slider-count').each(function(){
  	var thisSlider = $(this).parents('.zanaya-carousel'),
				counterCurrent = thisSlider.find('.zanaya-slider-count-current'),
				totalItems = thisSlider.find('.carousel-item').length,
    		activeIndex = thisSlider.find('.carousel-item.active').index() + 1,
    		currentIndex_active;

 		// build markup	
		// mark total amount of items
		thisSlider.find('.zanaya-slider-count-total').html(totalItems);
		// mark current item showing
    counterCurrent.html('<div class="zanaya-slider-count-number"><span>'+activeIndex+'</span></div>');
		//  

		// calculate the counter height.
		var counterHeight = thisSlider.find('.zanaya-slider-count-number').height(),
		    counterIndex = activeIndex; // store activeIndex in counterIndex var.

		thisSlider.on('slide.bs.carousel', function(e) {

			if ( 'left' == e.direction ) { // next slide
        currentIndex_active = thisSlider.find('.carousel-item.active').index() + 2;
        if (totalItems >= currentIndex_active) {
          counterIndex = currentIndex_active;
          initSliderCounterAnimation(e.direction, currentIndex_active);
        } else {
        	// console.log('NEXT END - loop back to beginning');
        	counterIndex = 1;
        	initSliderCounterAnimation(e.direction, counterIndex);
        }
			}	else { // prev slide
        counterIndex = counterIndex - 1;
        if ( counterIndex >= 1 ){
        } else {
        	// console.log('PREV END - loop back to ending');
        	counterIndex = totalItems;
        }
        initSliderCounterAnimation(e.direction, counterIndex);
			}

		});	

    function initSliderCounterAnimation(direction, count) {

  		if ( 'left' == direction) { // next slide
				counterCurrent.append('<div class="zanaya-slider-count-number"><span>'+count+'</span></div>');
				performSliderCounterAnimation('-'+counterHeight+'px', true); // true = with transition
				
				setTimeout(function(){ // animation is done
					counterCurrent.find('.zanaya-slider-count-number').eq(0).remove();
    			// disable transition in order to set the counter back to it's original position.
					performSliderCounterAnimation(0, false); // false = no transition
					setTimeout(function(){
						counterCurrent.removeClass('no-transition');
					}, 50); // restore transitions
				},400); // callback after 400ms which is the css defined transition time.
  		}
  		else { // prev slide
  			// append same count again to trick the count animation and be able the perform forward looking translateY.
  			counterCurrent.append('<div class="zanaya-slider-count-number"><span>'+counterCurrent.text()+'</span></div>');

  			// the trick is to disable transition in order to set the counter to negative translateY without animation. 
  			// then we reverse the animation to create a forward translate animation effect and show the correct count.
				performSliderCounterAnimation('-'+counterHeight+'px', false); // false = no transition
				// 
				setTimeout(function(){
					counterCurrent.find('.zanaya-slider-count-number').first().html('<span>'+count+'</span>');
					performSliderCounterAnimation(0, true); // true = with transition
				}, 10); // restore transitions

				setTimeout(function(){ // animation is done
					counterCurrent.find('.zanaya-slider-count-number').eq(1).remove();
				},400); // callback after 400ms which is the css defined transition time.
			}	
    		
    } // end of initSliderCounterAnimation().

    function performSliderCounterAnimation(val, transition){
    	if ( true == transition ){
    		counterCurrent.removeClass('no-transition');
    	} else {
    		counterCurrent.addClass('no-transition');
    	}
			counterCurrent.css({
		  	transform: 'translate(0, '+val+')',
		  	'-webkit-transform': 'translate(0, '+val+')',
		  	'-ms-transform': 'translate(0, '+val+')'
			});
    }

  });

	function imagesLoadedCallback() {

		/* ------------------  PAGINATION  ------------------ */

		if ($().zanayaResponsivePagination) { // check if the method exists
			var resoonsivePaginationWrap = $('.zanaya-responsive-pagination'),
				pageCount = resoonsivePaginationWrap.find('li').length;
			if ( pageCount > 5 ) {
				$('.zanaya-responsive-pagination').zanayaResponsivePagination();			
			}
		}

		/* ------------------  ANIMATIONS  ------------------ */

		if ($().restartAnimation) { // check if the method exists before calling animations
			if ( !body.hasClass('is-mobile') && !body.hasClass('disable-animate-plus') ) { // animate only if window size is >= 768
				AnimatePlus.getInstance().start();
			} else {
				$('.pre-anim-opac-0').removeClass('pre-anim-opac-0');
			}
		}

		$('.anim-intersect').addClass('pre-anim-opac-0 animated');

		if ('IntersectionObserver' in window) {
			// use intersection observer if browser supports it.
			const config = {
			  root: null, // setting root to null sets it to viewport
			  rootMargin: '0px',
			  threshold: 0.5
			};
			let observer = new IntersectionObserver(function(entries) {
			  entries.forEach(function (entry) {
			    const {isIntersecting, intersectionRatio} = entry;
					if (isIntersecting === true || intersectionRatio > 0) {
						var thisEl = $(entry.target),
								animationClass = thisEl.attr('data-animation') || 'zanaya-fadeInUp-small',
								animationDuration = thisEl.attr('data-animation-duration') || '0.6s',
								animationDelay = thisEl.attr('data-animation-delay') || 0;
				    
				    // animation duration
				    thisEl.css('animation-duration', '').css('-webkit-animation-duration', '').css('-moz-animation-duration', '').css('-ms-animation-duration', '').css('-o-animation-duration', '');
				    if ( '0.6s' != animationDuration) {
				        thisEl.css("animation-duration", animationDuration).css("-webkit-animation-duration", animationDuration).css("-moz-animation-duration", animationDuration).css("-ms-animation-duration", animationDuration).css("-o-animation-duration", animationDuration);
				    }

				    // animation delay
				    thisEl.css('animation-delay', '').css('-webkit-animation-delay', '').css('-moz-animation-delay', '').css('-ms-animation-delay', '').css('-o-animation-delay', '');
				    if ( 0 != animationDelay ) {
				      thisEl.css('animation-delay', animationDelay).css('-webkit-animation-delay', animationDelay).css('-moz-animation-delay', animationDelay).css('-ms-animation-delay', animationDelay).css('-o-animation-delay', animationDelay);
				    }
				
						// animate
    			 	thisEl.removeClass('pre-anim-opac-0').addClass(animationClass).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
       		 	// animation end event
    				});

			      observer.unobserve(entry.target); // unobserve
			    }
			  });
			}, config);

			const domElements = document.querySelectorAll('.anim-intersect');
			domElements.forEach(domElem => {
			    observer.observe(domElem);
			});
		}		

		/* ------------------  ANIMATED HEADINGS  ------------------ */
		if ($().zanayaAnimatedHeadlines) { // check if the method exists before calling animations
			$('.zanaya-headline').zanayaAnimatedHeadlines();
		}

		/* ------------------  PROGRESS BARS  ------------------ */

		$('.zanaya-progress-bar').each(function() {
			startZanayaProgressBar(this);
		});

		/* ------------------  ANIMATED IMAGE SHADOW  ------------------ */
		$('.zanaya-img-animated-shadow').each(function(){
			var animatedEl = $(this);
		 // start animation
		  var inview = new Waypoint.Inview({
		      element: animatedEl,
		      enter: function(direction) {
		      	animatedEl.addClass('active');
		      }
		  });
		});	

		/* ------------------  COUNTERS  ------------------ */

		$('.zanaya-counter').each(function() {
			startZanayaCounter(this);
		});

		/* ------------------  FLIP BOXES  ------------------ */

		$('.zanaya-flipbox').each(function() {
			var thisFlipbox = $(this),
				frontNestedCol = thisFlipbox.find('.flipbox-front').find('.zanaya-nested-col'),
				backNestedCol = thisFlipbox.find('.flipbox-back').find('.zanaya-nested-col'),
				frontHeight = frontNestedCol.outerHeight(),
				backHeight = backNestedCol.outerHeight();

			if (frontHeight > backHeight) {
				// match back height to front
				backNestedCol.css('min-height', frontHeight + 'px');
				// gsap parallax support
				backNestedCol.find('.gsap-parallax').css('min-height', frontHeight + 'px');
			} else if (backHeight > frontHeight) {
				// match front height to back
				frontNestedCol.css('min-height', backHeight + 'px');
				// gsap parallax support
				frontNestedCol.find('.gsap-parallax').css('min-height', backHeight + 'px');
			}

			thisFlipbox.flip({
				axis: thisFlipbox.attr('data-axis'), // y or x
				reverse: (thisFlipbox.attr('data-reverse') == 'true') ? true : false,
				trigger: thisFlipbox.attr('data-trigger') || 'click', // click, hover, manual
				speed: thisFlipbox.attr('data-speed'),
				front: thisFlipbox.find('.flipbox-front'),
				back: thisFlipbox.find('.flipbox-back'),
				autoSize: false
			}).css('visibility', 'visible');
		});


		/* ------------------  MASONRY ------------------ */

		$('.zanaya-masonry-grid').each(function() {
			initZanayaMasonry(this);
		});

		/* ------------------  ISOTOPE  ------------------ */

		$('.isotope-wrapper').each(function(i, gridContainer) {
			var $gridContainer = $(gridContainer);
			// init isotope for each container
			var $grid = $gridContainer.find('.isotopeContainer').imagesLoaded(function() {
				$grid.isotope({
					itemSelector: '.isotopeSelector'
				});
			});
			// init filters for each container
			$gridContainer.find('.isotopeFilters').on('click', 'li a', function() {
				var thisLink = $(this);
				if (thisLink.attr('data-filter') != undefined) {
					thisLink.parents('.isotopeFilters').find('.active').removeClass('active');
					thisLink.parent().addClass('active');
					thisLink.toggleClass('zanaya-filter-active');
					var filterValue = thisLink.attr('data-filter');
					$grid.isotope({
						filter: filterValue
					});
				}
			});
		});

		/* ------------------  REVEAL  ------------------ */

		$('.make-zanaya-reveal').each(function() {
			$(this).children(':first-child').addClass('zanaya-reveal');
		});

		$('.zanaya-reveal').each(function() {
			zanayaReveal(this);
		});

		/* ------------------  LAVA  ------------------ */

		$('.zanaya-lava-canvas').each(function() {
			$(this).zanayaLavaAnimation();
		});

		/* ------------------  TEXT ANIMATION ------------------ */

		$('.zanaya-animated-text').each(function() {
			startZanayaTextAnimation(this);
		});

		/* ------------------  PARALLAX MOUSE FLOAT  ------------------ */

		$('.parallax-mouse-float').each(function() {
			var parallaxInstance = new Parallax(this);
		});

		/* --------------  MOUSE INTERACTIONS  -------------- */

		// tilt elements
		$('.hvr-zanaya-tilt').each(function() {
			initZanayaTilt(this);
		});
		// mouse interactive elements
		$('.hvr-zanaya-move-background').each(function() {
			zanayaMouseInteractions(this);
		});
		$('.hvr-zanaya-move-element').each(function() {
			zanayaMouseInteractions(this);
		});
		// particles
		$('.zanaya-particles').each(function() {
			fx_Particles(this, this.getAttribute('data-particles'));
		});
		// parallax scroll float
		if ($('.parallax-scroll').length > 0) {
			if ( !body.hasClass('disable-scroll-float') ) {
				ParallaxScroll.init();
			}
		}
		// waves
		$('.animated-wave-js').each(function() {
			fx_Waves(this);
		});

		/* --------------  ANIMATED / MORPHING SVG  -------------- */		

		$('.zanaya-svg.animated-svg').each(function() {
			var el = $(this);
			el.find('svg').each(function() {
				var thisSvg = $(this),
						svgID = thisSvg.attr('id');
				// once svg has an id - fire vivus
				var settings = {
					type: $(el).attr('data-svg-animation-type') || 'delayed', 
					duration: $(el).attr('data-svg-animation-duration') || 50, 
					dashGap: 20, 
					start: 'inViewport', 
				}

				$(el).css('visibility', '');
				var instance = new Vivus( svgID, settings );
				return instance;
			});
		});
			


		$('.zanaya-svg.morphing-svg').on('click', function(){

			var thisSvg = $(this),
					thisPath = thisSvg.find('path'),
					morphFrom = thisPath.attr('d'),
					morphTo = thisPath.attr('data-morph-to'),
					morphed = ( undefined == thisSvg.attr('data-morphed') || 'false' == thisSvg.attr('data-morphed') ) ? 'false' : 'true';
			
			// run the morphing animation.
			morphSvg( thisSvg, thisPath, morphFrom, morphTo, morphed );
		});


		function morphSvg(svg, path, morphFrom, morphTo, morphed){

			if ( svg.hasClass('is-animating') ) {
				return; // block if animation is not finished.
			}

			anime.timeline({loop: false}).add({
				targets: path[0],
				duration: 1200,
				d: [{value: morphTo}],
			  begin: function(anim) {
			  	svg.addClass('is-animating');
			  },	
				complete: function() {
					path.attr('data-morph-to', morphFrom );
					svg.removeClass('is-animating').attr( 'data-morphed', ( 'false' == morphed ) ? 'true' : 'false' );
				}
			});
		}


		var breadCrumbs = $('#zanaya-breadcrumbs');
		breadCrumbs.find('.breadcrumbs-page-title').each(function(){
			var thisBc = $(this),
					thisBcLength = thisBc.text().length;
			thisBc.addClass('fit-text');
			if ( undefined == thisBc.attr('data-limit-max-font-size') ) { 
				thisBc.attr('data-limit-max-font-size', 'true');
			}	
			if ( undefined == thisBc.attr('data-compressor') ) { 
				thisBc.attr('data-compressor', '0.44');
			}
			// mobile
			if ( ( body.not('.woocommerce').hasClass('archive') || body.not('.woocommerce').hasClass('search') ) && 560 > windowWidth ) { 
				if ( 12 < thisBcLength ) {
					thisBc.find('.bc-archive-tax').addClass('bc-word-break');
				}
				thisBc.attr('data-compressor', '1');
			}
			// zanaya-pages
			if ( ( body.hasClass('zanaya-page') ) && 420 > windowWidth ) { 
				// scale the compression relatived to the window size.
				var addFactor = ( 420 >= windowWidth && 375 <= windowWidth ) ? 0.3 : 0;
						addFactor = ( 374 >= windowWidth && 300 < windowWidth ) ? 0.2 : addFactor;
				if ( 12 <= thisBcLength ) {
					thisBc.find('.bc-archive-tax').addClass('bc-word-break');
					thisBc.attr('data-compressor', 1 );
				} else if ( 11 <= thisBcLength ) {
					thisBc.attr('data-compressor', ( 0.65 + addFactor ) );
				} else if ( 10 <= thisBcLength ) {
					thisBc.attr('data-compressor', ( 0.45 + addFactor ) );
				} else {
					addFactor = 0.025; // safety reduction for small mobile screens.
					thisBc.attr('data-compressor', ( parseFloat( thisBc.attr('data-compressor') ) + addFactor ) );
				}
			}
		});

		// fit text to parent container.
		$('.fit-text').each(function() {
			var this_el = $(this),
				compressor = this_el.attr('data-compressor') || 0.75,
				options = {};
			if ( 'true' == this_el.attr('data-limit-max-font-size') && undefined == this_el.attr('data-max-font-size') ) {
				this_el.attr( 'data-max-font-size', parseInt(this_el.css('font-size'), 10) );
			}
			if (undefined != this_el.attr('data-min-font-size')) {
				options.minFontSize = this_el.attr('data-min-font-size') + 'px';
			}
			if (undefined != this_el.attr('data-max-font-size')) {
				options.maxFontSize = this_el.attr('data-max-font-size') + 'px';
			}
		
			this_el.zanayaFitText(compressor, options);
		});


		/* ------------------  Slim Scroll  ------------------ */
		if (body.not('.is-mobile').find('.scroll-snap').length > 0) {

			$.fn.zanayaScrollSnap = function( options ){

				// default options
				var settings = $.extend({
					speed: 400
				}, options );

				var scrollStop,
					lastScrollTop =
						window.pageYOffset ||
							document.documentElement.scrollTop ||
								document.body.scrollTop ||
									0;

				function snapScroll( $snap, scroll, direction ){
					if( $( 'body' ).hasClass( 'lock-scroll' ) )
						return;

					var windowHeight = $( window ).height(),
						direction = typeof direction !== 'undefined' ? direction : 'up';

					var scrollTo = false;
					$snap.each( function(){
						if(
							scroll <= $( this ).offset().top && (
								// advance
								( direction == 'down' && scroll >= $( this ).offset().top - ( windowHeight * 2 / 3 ) ) ||
								// stabilize
								( direction == 'up' && scroll >= $( this ).offset().top - ( windowHeight / 3 ) )
							) ||
							scroll >= $( this ).offset().top && (
								// advance
								( direction == 'up' && scroll <= $( this ).offset().top + ( windowHeight * 2 / 3 ) ) ||
								// stabilize
								( direction == 'down' && scroll <= $( this ).offset().top + ( windowHeight / 3 ) )
							)
						){
							$( 'body:not( .lock-scroll )' ).addClass( 'lock-scroll' );
							scrollTo = $( this ).offset().top;
						}
					} );

					if( scrollTo !== false ){
						$( 'html, body' ).animate(
							{ scrollTop: scrollTo },
							settings.speed,
							function(){
								$( 'body.lock-scroll' ).removeClass( 'lock-scroll' );
								//setTimeout( function(){
								//	$( 'body.lock-scroll' ).removeClass( 'lock-scroll' );
								//}, 600 );
							}
						);
					}
				}

				var $snap = this;
				$_window.on( 'scroll', function(){
					var scroll =
						window.pageYOffset ||
							document.documentElement.scrollTop ||
								document.body.scrollTop ||
									0;

					var direction;					
					if( scroll > lastScrollTop ){
						direction = 'down';
					}
					else{
						direction = 'up';
					}

					lastScrollTop = scroll;

					clearTimeout( scrollStop );
					scrollStop = setTimeout( function(){
						snapScroll( $snap, scroll, direction );
					}, 100 );
				} );
			};
		
			$( '.scroll-snap' ).zanayaScrollSnap();
		}	
				
		// gsap parallax
		$('.parallax-inner').parents('.gsap-parallax').not('.rotate').parallaxBackground({});

		$('.gsap-parallax.rotate').parallaxBackground({
			animation_type: 'rotate',
			zoom: 50,
			rotate_perspective: 500
		});

		if (!body.hasClass('is-mobile')) {

			// distorted image hover
			$('.distorted-img-hvr').each(function() {
				var this_img = $(this);
				this_img.parent().css('height', this_img[0].clientHeight + 'px'); // parent must have at least the height of the child image.
				this_img.clone().appendTo(this_img.parent()); // clone the image
				this_img.parent().addClass('zanaya-img-hvr-distortion').attr('data-displacement', '2.jpg').attr('data-intensity', '-0.65').attr('data-speedIn', '1.2').attr('data-speedOut', '1.2');
			});

			Array.from(document.querySelectorAll('.zanaya-img-hvr-distortion')).forEach(function(el) {
				var imgs = Array.from(el.querySelectorAll('img'));
				new hoverEffect({
					parent: el,
					intensity: el.dataset.intensity || undefined,
					speedIn: el.dataset.speedin || undefined,
					speedOut: el.dataset.speedout || undefined,
					easing: el.dataset.easing || undefined,
					hover: el.dataset.hover || undefined,
					image1: imgs[0].getAttribute('src'),
					image2: imgs[1].getAttribute('src'),
					displacementImage: splent_wp_params.theme_dir + '/inc/assets/vendors/effects/distorted-img/displacement/' + el.dataset.displacement,
				});
			});

		}

		// RTL support.
		if ( body.hasClass('rtl')) {
			// text diection.
			body.addClass('rtl');
			html.attr('dir', 'rtl');
			// menu dropdowns
			$('.open-left').removeClass('open-left').addClass('open-right');
			$('.dropdown-caret.fa-angle-right').removeClass('fa-angle-right').addClass('fa-angle-left pull-right');
			
			// tags
			$('.single-post-tag').first().parents('.zanaya-inner-col').first().removeClass('z-pl-0').addClass('z-pr-0');
		}	

		activateLazyload(); // run lazyload

		//  Only trigger the executeDeferedLoading after document fully loaded.
		//  This is necessary for cases where page load takes a significant length of time to fully load.
		if (document.readyState == 'complete') {
	    setTimeout(function() {
				console.log('executing defered loading - 500ms');
				$('.defer').removeClass('defer').addClass('lazyload');
				$('.defer-bg').removeClass('defer-bg').addClass('lazyload-bg');
	    	activateLazyload(); // run lazyload for all defered elements.
	    }, 500); 
		} else {
	    document.onreadystatechange = function () {
        if (document.readyState === 'complete') {
			    setTimeout(function() {
						console.log('executing defered loading - 500ms');
						$('.defer').removeClass('defer').addClass('lazyload');
						$('.defer-bg').removeClass('defer-bg').addClass('lazyload-bg');
			    	activateLazyload(); // run lazyload for all defered elements.
			    }, 500); 
        }
	    }
		}

		// safety margin and padding //
		// keep footer/colophon spaced correctly when content padding and comments are both disabled.
		var unstyledContent = body.not('.zanaya-page').find('.site-content').not('[class*=classMark]');
		// keep padding to post content when full width is selected and content padding is disabled.
		if ( ! body.not('.zanaya-page').find('.zanaya-row-group').hasClass('container') && unstyledContent.length > 0 ) {
			primary.removeClass('zanaya-np');
		}

		// keep pagination presets 2,3 spaced correctly when content padding is enabled, related posts are disabled and comments are disabled.
		if ( unstyledContent.not('.comments-open').length > 0 && ! unstyledContent.hasClass('z-np') 
			&& ( $('.single-post-pagination-2').length > 0 || $('.single-post-pagination-3').length > 0 ) 
			&& ( $('.related-posts-carousel').length == 0 && $('.more-from-author-carousel').length == 0 ) ) {
			unstyledContent.addClass('z-pb-0');
		}


		// video with preload="none" that are not to be lazyloaded.
		$('video[preload="none"]').not('.lazyload').each(function(){
			var thisVideo = $(this);
			// videos in sliders  - run first video on load if it's has active class
			if (thisVideo.attr('data-name') == 'video') {
				var playPromise = thisVideo.get(0).play();
				if (playPromise !== undefined) {
					playPromise.then(function(_) {
						// auto play started
					}).catch(function(error) {
						// auto play was prevented by the browser
						// muted video to allow video to play
						thisVideo.prop('muted', 'muted');
						thisVideo.get(0).play();
					});
				}
			}			
		});
	} // end of images loaded callback


	/* ------------------  LAZYLOAD  ------------------ */

	function activateLazyload( ) {

		$('img.lazyload').not('.loaded').lazyload({
			complete: function(el) {
				$(el).imagesLoaded({
					background: true
				}, function() {
					$(el).addClass('loaded');
					$_window.trigger('resize').trigger('scroll');
				});
			},
		});

		$('.gsap-parallax-bg.lazyload-bg').not('.loaded').lazyload({
			background: true,
			complete: function(el) {
				$(el).imagesLoaded({
					background: true
				}, function() {
					$(el).addClass('loaded');
					var dataBg = $(el).attr('data-parallax-bg');
					if ( undefined != dataBg && '' != dataBg ) {
						$(el).css({'background-image': dataBg });
					}
					$_window.trigger('resize').trigger('scroll');
				});
			},
		});

		// lazyload bg images with class lazyload-bg
		$('div.lazyload-bg').not('.loaded').not('.gsap-parallax-bg').lazyload({
			complete: function(el) {
				$(el).imagesLoaded({
				}, function() {
					// support for zanaya-parallax lazyloading
					if( $(el).hasClass('zanaya-parallax') ) {
						var parallaxInner = $(el).find('.parallax-inner'),
								dataBg = parallaxInner.attr('data-parallax-bg');
						if ( undefined != dataBg && '' != dataBg ) {
							parallaxInner.css('background-image', dataBg ).removeAttr('data-parallax-bg');
						}
					}
					$(el).addClass('loaded').css({'background-image': '', 'background-color': ''});
					$_window.trigger('resize').trigger('scroll');
				});
			},
		});

		$('video.lazyload').not('.loaded').lazyload({
			complete: function(el) {
				var thisVideo = $(el);
				thisVideo.addClass('loaded');
				thisVideo.get(0).load(); // needed before playing
				var playPromise = thisVideo.get(0).play();
				if (playPromise !== undefined) {
					playPromise.then(function(_) {
						// auto play started
					}).catch(function(error) {
						// auto play was prevented by the browser
						// muted video to allow video to play
						thisVideo.prop('muted', 'muted');
						thisVideo.get(0).play();
					});
				}
			},
		});

	} // end of activateLazyload().
	

	// 404, 403 pages.
	if (body.hasClass('error404') || body.hasClass('error403')) {
		$('#masthead').addClass('nav-on-top').find('nav').removeClass('transparent');
		$('.zanaya-footer-reveal').removeClass('zanaya-footer-reveal');
	}

	var gMapsAPI_KEY = ps_theme_scope.google_api_keys.google_maps_api_key;

	if ($().zanayaMaps) {
		$('.gmap_canvas').zanayaMaps();
	}

	var zanayaPage = $('.zanaya-page');

	// remove blank p tags on zanaya-builder pages.
	$('p').each(function() {
		var $this = $(this);
		if ($this.html().replace(/\s|&nbsp;/g, '').length == 0) {
			$this.remove();
		}
	});
	
	// remove line br on zanaya builder pages.
	zanayaPage.find('br').not('.zanaya-br').remove();

	function initZanayaTilt(el, destroy) {
		if (destroy != undefined) {
			$(el).removeClass('hvr-zanaya-tilt').find('.js-tilt-glare').remove();
			$(el).css({
				'will-change': '',
				'transform': ''
			});
			$(el).off('mousemove mouseenter mouseleave');
		} else {
			$(el).tilt({
				maxTilt:        10,
				perspective:    1000,   // Transform perspective, the lower the more extreme the tilt gets.
				easing:         'cubic-bezier(.03,.98,.52,.99)',    // Easing on enter/exit.
				scale:          1,      // 2 = 200%, 1.5 = 150%, etc..
				speed:          300,    // Speed of the enter/exit transition.
				transition:     true,   // Set a transition on enter/exit.
				disableAxis:    null,   // What axis should be disabled. Can be X or Y.
				reset:          true,   // If the tilt effect has to be reset on exit.
				glare:          false,  // Enables glare effect
				maxGlare:       1       // From 0 - 1.	
			});
		}
	}

	function fx_Particles(el, json) {

		var elParticlesID = $(el).attr('data-particles-id');
		if ($(el).attr('id') == undefined) {
			$(el).attr('id', elParticlesID);
		}
		var dataJson = JSON.parse(json);

		// backward compability - convert color and shape strings into arrays to support multiple values.
		if ($.isArray(dataJson.particles.color.value) == false) {
			dataJson.particles.color.value = [dataJson.particles.color.value];
		}
		if ($.isArray(dataJson.particles.shape.type) == false) {
			dataJson.particles.shape.type = [dataJson.particles.shape.type];
		}

		particlesJS(elParticlesID, dataJson);
	}

	function fx_Waves(el) {

		var waveMarkup = '<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg" class="wave">' +
			'<defs>' +
			'<linearGradient id="' + $(el).attr('id') + '_gradient1" class="clone-exclude-id" x1="0" x2="0" y1="0" y2="1">' +
			'<stop offset="0%" stop-color="' + $(el).attr('data-wave1-stop-color-a') + '" stop-opacity="0.8"></stop>' +
			'<stop offset="50%" stop-color="' + $(el).attr('data-wave1-stop-color-b') + '" stop-opacity="0.4"></stop>' +
			'</linearGradient>' +
			'<linearGradient id="' + $(el).attr('id') + '_gradient2" class="clone-exclude-id" x1="0" x2="0" y1="0" y2="1">' +
			'<stop offset="0%" stop-color="' + $(el).attr('data-wave2-stop-color-a') + '" stop-opacity="0.7"></stop>' +
			'<stop offset="50%" stop-color="' + $(el).attr('data-wave2-stop-color-b') + '" stop-opacity="0.3"></stop>' +
			'</linearGradient>' +
			'</defs>' +
			'<path id="animated-wave-js-1" class="clone-exclude-id animated-wave-js-path" d="" data-wave-height="' + $(el).attr('data-wave1-height') + '" data-wave-bones="' + $(el).attr('data-wave1-bones') + '" data-wave-amplitude="' + $(el).attr('data-wave1-amplitude') + '" data-wave-speed="' + $(el).attr('data-wave1-speed') + '" data-wave-color-id="' + $(el).attr('id') + '_gradient1"></path>' +
			'</svg>' +
			'<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg" class="wave"><path id="animated-wave-js-2" class="clone-exclude-id animated-wave-js-path" d="" data-wave-height="' + $(el).attr('data-wave2-height') + '" data-wave-bones="' + $(el).attr('data-wave2-bones') + '" data-wave-amplitude="' + $(el).attr('data-wave2-amplitude') + '" data-wave-speed="' + $(el).attr('data-wave2-speed') + '" data-wave-color-id="' + $(el).attr('id') + '_gradient2"></path>' +
			'</svg>';

		$(el).html(waveMarkup);

		var wave1 = $(el).find('#animated-wave-js-1'),
			wave1Obj = {
				height: parseInt(wave1.attr('data-wave-height'), 10) || 200,
				bones: parseInt(wave1.attr('data-wave-bones'), 10) || 100,
				amplitude: parseInt(wave1.attr('data-wave-amplitude'), 10) || 0.15,
				speed: parseFloat(wave1.attr('data-wave-speed')) || 3,
				color: 'url(#' + wave1.attr('data-wave-color-id') + ')' || 'rgba(255,255,255, 0.20)'
			};
		wave1.wavify(wave1Obj);

		var wave2 = $(el).find('#animated-wave-js-2'),
			wave2Obj = {
				height: parseInt(wave2.attr('data-wave-height'), 10) || 200,
				bones: parseInt(wave2.attr('data-wave-bones'), 10) || 100,
				amplitude: parseInt(wave2.attr('data-wave-amplitude'), 10) || 0.15,
				speed: parseFloat(wave2.attr('data-wave-speed')),
				color: 'url(#' + wave2.attr('data-wave-color-id') + ')' || 'rgba(255,255,255, 0.20)'
			};
		wave2.wavify(wave2Obj);

	}

	function zanayaMouseInteractions(el, destroy) {

		if (destroy != undefined) {
			$(el).off('mousemove');
			return;
		}

		var lFollowX = 0,
			lFollowY = 0,
			x = 0,
			y = 0,
			friction = 1 / 30,
			effect;

		if ($(el).hasClass('hvr-zanaya-move-element')) {
			effect = 'transform';
		} else if ($(el).hasClass('hvr-zanaya-move-background')) {
			effect = 'position';
		}

		function initInteractions() {
			x += (lFollowX - x) * friction;
			y += (lFollowY - y) * friction;
			if (effect == 'transform') {
				var translate = 'translate(' + x + 'px, ' + y + 'px) scale(1.0)';
				$(el).css({
					'-webit-transform': translate,
					'-moz-transform': translate,
					'transform': translate
				});
			} else if (effect == 'position') {
				$(el).css({
					'background-position-x': x,
					'background-position-y': y
				});
			}
			window.requestAnimationFrame(initInteractions);
		}

		$(el).on('mousemove', function(e) {
			var lMouseX = Math.max(-100, Math.min(100, $_window.width() / 2 - e.clientX));
			var lMouseY = Math.max(-100, Math.min(100, $_window.height() / 2 - e.clientY));
			lFollowX = (20 * lMouseX) / 100; // 100 : 12 = lMouxeX : lFollow
			lFollowY = (10 * lMouseY) / 100;
		});

		initInteractions();

	}

	function zanayaReveal(el) {
		var inview = new Waypoint.Inview({
			element: el,
			enter: function(direction) {
				if (!$(el).hasClass('visible')) { // ensures a single execution

					// load reveal effected images immediately.
					$(el).find('img').each(function() {
						var img = $(this);
						if (img.hasClass('lazyload')) {
							img.removeClass('lazyload').attr('src', img.attr('data-src'));
						}
					});

					var revealEl = new RevealFx(el, {
						revealSettings: {
							bgcolor: $(el).attr('data-bgcolor') || '#ddd',
							direction: $(el).attr('data-direction') || 'lr',
							delay: $(el).attr('data-delay') || 300,
							onStart: function() {
								$(el).addClass('visible');
							},
							onCover: function(contentEl, revealerEl) {
								contentEl.style.opacity = 1;
							}
						}
					});
					revealEl.reveal();
					inview.destroy(); // remove listener.
					linkListers(); // revealed element has links?
				}
			},
			offset: {
				bottom: $(el).attr('data-offset-bottom') || 300
			}
		});
	}

	$.fn.zanayaFitText = function(comp, options) {
		var compressor = comp || 1,
			settings = $.extend({
				'minFontSize': Number.NEGATIVE_INFINITY,
				'maxFontSize': Number.POSITIVE_INFINITY
			}, options);

		return this.each(function() {
			var $this = $(this);
			// resizer() resizes items based on the object width divided by the compressor * 10
			var resizer = debounce(function() {
				
				if ( $this.hasClass('breadcrumbs-page-title') ) {
					$this.css({'font-size': '', 'line-height': ''}).removeClass('fit-text-adjusted').find('.bc-archive-tax').removeClass('bc-word-break'); // clear previous
					var thisBcLength = $this.text().length;
					// update window width var on resize / orienation event.
					windowWidth  = $_window.width();	
					// mobile
					if ( ( body.not('.woocommerce').hasClass('archive') || body.not('.woocommerce').hasClass('search') ) && 560 > windowWidth ) { 
						if ( 12 < thisBcLength ) {
							$this.find('.bc-archive-tax').addClass('bc-word-break');
						}
						compressor = 1; // update compressor value
					}
				}
				var calcFontSize = Math.max(Math.min($this.width() / (compressor * 10), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize));
				
				if ( parseInt( $this.css('font-size'), 10 ) != calcFontSize ) {
					$this.css({'font-size': calcFontSize, 'line-height': ''}).addClass('fit-text-adjusted');
				}
				
				if ( $this.hasClass('fit-text-adjusted') && ! body.hasClass('zanaya-page') ) {
					if ( 32 > calcFontSize) {
						$this.css('line-height', '3.5rem');
					}
					if ( 40 > calcFontSize) {
						$this.css('line-height', '4rem');
					}				
				}	
			}, 50);
			// call once to set.
			resizer();
			// call on resize.
			$_window.on('resize.fittext orientationchange.fittext', resizer);

		});
	};

	$.fn.zanayaFooterReveal = function(options) {
		var $this = $(this),
			$win = $_window,
			defaults = $.extend({
				shadow: false, // shadow can interfere with isotope markups when page becomes shorter after filtering.
				shadowOpacity: 0.8,
				zIndex: -100
			}, options),
			settings = $.extend(true, {}, defaults, options);

		if ($this.outerHeight() <= $win.outerHeight() && $this.offset().top >= $win.outerHeight()) {
			$this.css({
				'z-index': defaults.zIndex,
				position: 'fixed',
				bottom: 0
			});

			if (defaults.shadow) {
				content.css({
					'-moz-box-shadow': '0 20px 30px -20px rgba(0,0,0,' + defaults.shadowOpacity + ')',
					'-webkit-box-shadow': '0 20px 30px -20px rgba(0,0,0,' + defaults.shadowOpacity + ')',
					'box-shadow': '0 20px 30px -20px rgba(0,0,0,' + defaults.shadowOpacity + ')'
				});
			}

			$win.on('load resize zanayaFooterRevealResize', function() {
				$this.css({
					'width': content.outerWidth()
				});
				content.css({
					'margin-bottom': $this.outerHeight()
				});
				body.addClass('footer-reveal-adjusted');
			});
		}
		return this;
	};

	// footer reveal.
	var zanayaFooterRevealEl = $('.zanaya-footer-reveal');
	if (!body.hasClass('is-mobile') && zanayaFooterRevealEl.length > 0) {
		zanayaFooterRevealEl.wrapAll('<div class="zanaya-footer-reveal-wrap"></div>');
		$('.zanaya-footer-reveal-wrap').zanayaFooterReveal({
			zIndex: 0
		}); // should not be a negative value
	}


	
	/* ------------------  LOADING SCREEN  ------------------ */

	body.imagesLoaded({
		background: true
	}, function() {

		// prevent flashing unstyled content if defering themes' stylesheet with a caching plugin.
		html[0].style.visibility = '';
		html[0].style.opacity = '';
		html[0].style.overflowY = '';
		var transitionSearch = document.getElementById('transition-search');
		if ( undefined != transitionSearch ) {
			setTimeout(function(){
			 	transitionSearch.style.opacity = '';	
			}, 1000);			
		}
		var accessibilityToolbar = document.getElementById('ps_accessibility-toolbar');
		if ( undefined != accessibilityToolbar ) {
			setTimeout(function(){
			 	accessibilityToolbar.style.display = '';	
			}, 1000);			
		}
		// 		
		var loadCompleteEffect = 'slideup';
		preloader = $('#zanaya-preloader');
		if ( preloader.find('.sk-border').length > 0 ){
			setTimeout(function(){
				preloader.css('background-color', 'transparent');
				setTimeout(function(){
					imagesLoadedCallback();
				}, 10);  // background color has a 1s transition;
			}, 1200); // border animation is 1.2s
		}
		else if ('fade' == loadCompleteEffect) {
			preloader.delay(250).fadeOut('slow', function() {
				imagesLoadedCallback();
			});
		} else if ('slideup' == loadCompleteEffect) {
			setTimeout(function() {
				preloader.addClass('preloader-slide-up');
				imagesLoadedCallback();
			}, 1000);
		}
	});


/*  
---------------------------------------------------------------------------
*  Theme Name: Splent - Responsive Multi Purpose Templates w page builder  *
*  Author: NouvelloThemes                                                 *
*  Version: 1.0.0                                                         *
---------------------------------------------------------------------------
*/


/* Contents:

  1.  Blog - Load More
  2.  Blog - Infinite Scroll
  6.  Widgets
  7.  Social Sharing
  8.  Contact Form
  
  3.  WooCommerce - Wish List
  4.  WooCommerce - Quick view, Cart, Favorites
  5.  WooCommerce - Grid / List views


*/

		var primary = $('#primary'),
			secondary = $('#secondary'),
			primaryContentWrapper = $('#primary-content-wrapper'),
			main = $('#main'),
			footerWidgetsArea = $('#footer-widgets-area'),
			infiniteScroll = false,
			loadMore = false,
			postLayout = content.attr('data-post-layout'),
			contentPagination = content.attr('data-pagination'),
			wishlistItemsString,
			wishlistItemsArray;

		/* ------------------  Blog - Load More  ------------------ */


		getPaginationVars();

		if ($('.zanaya-pagination').length > 0) {
			contentPagination = 'splent_pagination';
		}

		if (contentPagination == 'splent_load_more') {
			loadMore = true;
			enableLoadMore();
		} else if (contentPagination == 'splent_infinite_scroll') {
			infiniteScroll = true;
			enableInfiniteScroll();
		}

		function enableLoadMore() {

			$('.splent-loadmore').on('click', function(){

				if (infiniteScroll == true) {
					return false;
				} // do not allow infiniteScroll when loadMore is used

				var button = $(this),
					data = {
						'action': 'splent_load_more',
						'query': splent_wp_params.posts,
						'page': splent_wp_params.current_page,
						'layout': postLayout,
						'nonce': splent_wp_params.ajax_nonce,
						'current_loop_index': splent_wp_params.current_index,
					};

				$.ajax({
					url: splent_wp_params.ajax_url,
					data: data,
					type: 'POST',
					beforeSend: function(xhr) {
						button.text('Loading...');
					},
					success: function(data) {

						if (data) {
							button.text('More posts');
							if (postLayout.indexOf('-masonry') > -1) {
								var masonryGrid = main.find('.zanaya-masonry-grid');
								masonryGrid.append(data);
								setTimeout(function() {
									if ( 'true' != masonryGrid.attr('data-keep-order')){
										masonryGrid.packery('reloadItems');
										masonryGrid.packery('layout');
									} else {
										masonryGrid.masonry('reloadItems');
										masonryGrid.masonry('layout');								
									}
								}, 100);

							} else {
								$(data).insertBefore(button.parent());
							}

							reinitElements(); // reinit all elements that require it.

							splent_wp_params.current_page++;

							if (splent_wp_params.current_page == splent_wp_params.max_page) {
								$('<div id="all-displayed"><em>All items displayed.</em></div>').insertBefore(button);
								button.remove();

								setTimeout(function() {
									$('#all-displayed').addClass('invisible');
								}, 3000); // remove message after 3 seconds.
							}

						} else {
							button.remove();
						}
					}
				});
			});

		}

		/* ------------------  Blog - Infinite Scroll  ------------------ */

		function enableInfiniteScroll() {

			var canBeLoaded = true, // this param allows to initiate the AJAX call only if necessary
				bottomOffset = 2000; // the distance (in px) from the page bottom when you want to load more posts

			var infiniteScrollContentLoad = debounce(function() {

				var data = {
						'action': 'splent_load_more',
						'query': splent_wp_params.posts,
						'page': splent_wp_params.current_page,
						'layout': postLayout,
						'nonce': splent_wp_params.ajax_nonce,
						'current_loop_index': splent_wp_params.current_index,
					},

				infiniteScrollMsg = $('#splent-infinite-scroll-msg');
				if ($(document).scrollTop() > ($(document).height() - bottomOffset) && canBeLoaded == true) {

					$.ajax({
						url: splent_wp_params.ajax_url,
						data: data,
						type: 'POST',
						beforeSend: function(xhr) {
							$('#splent-infinite-scroll-msg').removeClass('hidden');
							canBeLoaded = false;
						},
						success: function(data) {
							infiniteScrollMsg.addClass('hidden');
							if (data) {
								$(data).insertBefore(infiniteScrollMsg.parent());

								if (postLayout.indexOf('-masonry') > -1) {
									setTimeout(function() {
										var masonryGrid = main.find('.zanaya-masonry-grid');
										if ( 'true' != masonryGrid.attr('data-keep-order')){
											masonryGrid.packery('reloadItems');
											masonryGrid.packery('layout');
										} else {
											masonryGrid.masonry('reloadItems');
											masonryGrid.masonry('layout');								
										}
									}, 100);

								}

								reinitElements(); // reinit all elements that require it.

								canBeLoaded = true;
								splent_wp_params.current_page++;

								if (splent_wp_params.current_page == splent_wp_params.max_page) {
									$('<div id="all-displayed"><em>All items displayed.</em></div>').insertBefore(infiniteScrollMsg);
									infiniteScrollMsg.remove();

									setTimeout(function() {
										$('#all-displayed').addClass('invisible');
									}, 3000); // remove message after 3 seconds.	
								}

							}
						}
					});
				}

			}, 250); // throttle by 250ms.

			window.addEventListener('scroll', infiniteScrollContentLoad);

		}

		function reinitElements() {
			$('.gsap-parallax').not('.rotate').parallaxBackground({});
			$('.gsap-parallax.rotate').parallaxBackground({
				animation_type: 'rotate',
				zoom: 50,
				rotate_perspective: 500
			});

			$('.distorted-img-hvr').each(function() {
				var $this = $(this),
					$thisParent = $(this).parent();
				$thisParent.css('height', this.clientHeight + 'px'); // parent must have at least the height of the child image.
				$this.clone().appendTo($thisParent); // clone the image
				$thisParent.addClass('zanaya-img-hvr-distortion').attr('data-displacement', splent_wp_params.theme_dir + '/inc/assets/vendors/effects/distorted-img/displacement/2.jpg').attr('data-intensity', '-0.65').attr('data-speedIn', '1.2').attr('data-speedOut', '1.2');
			});

			Array.from(document.querySelectorAll('.zanaya-img-hvr-distortion')).forEach(function(el) {
				var imgs = Array.from(el.querySelectorAll('img'));
				new hoverEffect({
					parent: el,
					intensity: el.dataset.intensity || undefined,
					speedIn: el.dataset.speedin || undefined,
					speedOut: el.dataset.speedout || undefined,
					easing: el.dataset.easing || undefined,
					hover: el.dataset.hover || undefined,
					image1: imgs[0].getAttribute('src'),
					image2: imgs[1].getAttribute('src'),
					displacementImage: splent_wp_params.theme_dir + '/inc/assets/vendors/effects/distorted-img/displacement/' + el.dataset.displacement,
				});
			});

		}

		function getPaginationVars() {
			// support for blog roll via shortcode - used in demo to show the different blog layouts
			if ($('#sc_blog_query_posts').length > 0) {
				postLayout = $('#sc_blog_query_blog_layout').html();
				contentPagination = $('#sc_blog_query_pagination').html();
				// overide localized vars
				splent_wp_params.posts = $('#sc_blog_query_posts').html();
				splent_wp_params.current_page = $('#sc_blog_query_current_page').html();
				splent_wp_params.max_page = $('#sc_blog_query_max_page').html();
				splent_wp_params.current_index = $('#sc_blog_query_current_index').html();
			}

			// load more and infinite scroll support for portfolio end point.
			if (primaryContentWrapper.length > 0 && undefined != primaryContentWrapper.attr('data-portfolio-query-posts')) {
				postLayout = primaryContentWrapper.attr('data-portfolio-layout');
				contentPagination = primaryContentWrapper.attr('data-portfolio-pagination');
				// overide localized vars
				splent_wp_params.posts = primaryContentWrapper.attr('data-portfolio-query-posts');
				splent_wp_params.current_page = primaryContentWrapper.attr('data-current-page');
				splent_wp_params.max_page = primaryContentWrapper.attr('data-max_page');
				splent_wp_params.current_index = primaryContentWrapper.attr('data-current-index');
			}
		}


		// check if sidebar is populated with widgets.
		// the sidebar is removed by php when empty so the code below serves as a safety
		if (secondary.length > 0 && secondary.children().length == 0) {
			content.addClass('no-sidebar').removeClass('has-sidebar has-left-sidebar has-right-sidebar');
			primary.attr('class', 'content-area zanaya-col-group col-lg-12 col-md-12 col-sm-12 col-xs-12');
			secondary.remove();
		}


		/* ------------------  Widgets  ------------------ */

		/* search widget (no title) - sidebar */
		secondary.find('.widget_media_gallery').each(function() {
			var thisWidget = $(this);
			if (thisWidget.find('.widget-title').length == 0) {
				thisWidget.addClass('no-title');
			}
		});

		/* menu widget (empty link) - sidebar */
		secondary.find('.widget_nav_menu').each(function() {
			var thisWidget = $(this);
    	thisWidget.find('li a').each(function() {
    		var thisLink = $(this);
    		if (thisLink.text() == ''){
    			thisLink.parent().addClass('no-border');
    		}
    	});	
		});

		// woocommerce category count.
		var wcCatCount = $('.widget.woocommerce ul .count');
		wcCatCount.each(function(){
			var thisCount = $(this),
					thisText = thisCount.text().replace('(', '').replace(')', '');
					thisCount.text(thisText)

		}); 

		// fix admin bar to top in mobile mode (if admin is logged in )
		if ($('#wpadminbar').length > 0) {
			$('head').append('<style>@media screen and (max-width: 600px){#wpadminbar{position:fixed}}');
		}


		// support for zanaya-hoverable galleries that have videos
		// 
		$('.zanaya-gallery-item .zanaya-youtube-embed-container').each(function() {
			var videoContainer = $(this),
				galleryItem = videoContainer.parent(),
				breakerWidth;

			if (videoContainer.parents('.zanaya-masonry-col').length > 0) {
				var masonryCol = videoContainer.parents('.zanaya-masonry-col');
				breakerWidth = ((masonryCol[0].offsetWidth) - 2); // 2 px compensation for border.
			}

			if (undefined != breakerWidth && galleryItem.find('.breaker').length == 0) {
				// append spacer so video iframe can render.
				galleryItem.prepend('<div class="breaker" style="width:' + breakerWidth + 'px; padding: 0; margin: 0;"></div>');
				// remove enlarge button
				galleryItem.find('[data-href-target="_lightbox"]').remove();
			}

		});


		// add dropdown icon to widget with select elements

		$('.widget select').each(function() {
			var thisSelect = $(this);
			thisSelect.wrap('<div class="form-group has-feedback"></div>').parent().append('<i class="form-control-feedback fa fa-angle-down dropdown-icon"></i>');
		});


		/* ------------------  Social Sharing  ------------------ */

		// social sharing
		$('.custom-share-button').on('click', function(e) {
			e.preventDefault();
			var title = 'Share this post';
			var URL = jQuery(this).attr('data-share');
			var width = 500,
				height = 500,
				left = (screen.width - width) / 2,
				top = (screen.height - height) / 4;
			var targetWin = window.open(URL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + width + ', height=' + height + ', top=' + top + ', left=' + left);
			return false;
		});


		/* ------------------  Contact Form  ------------------ */

		$('.zanaya-ajax-contact-form').on('submit', function(e) {
			e.preventDefault();

			var form = $(this),
				data = {
					'action': 'splent_submit_contact_form',
					'mailing-list': ( form.hasClass('mailing-list') ) ? 'true' : 'false',
					'form_data': form.serialize(),
					'nonce': splent_wp_params.ajax_nonce
				};

			$.ajax({
				url: splent_wp_params.ajax_url,
				data: data,
				type: 'POST',
				beforeSend: function(xhr) {
					// clear errors
					$('.input-error').removeClass('input-error');
				},
				success: function(data) {

					try {
						var jsonData = JSON.parse(data);
						if (undefined != jsonData.status) {
							switch (jsonData.status) {
								case 'success':
									toastr.success('Your message has been sent.', 'Success!');
									break;
								case 'error':
									if (undefined != jsonData.errors) {
										for (var error in jsonData.errors) {
											if (jsonData.errors.hasOwnProperty(error)) {
												$('.form-input-' + error).addClass('input-error');
												toastr.warning(jsonData.errors[error], 'Notice!');
											}
										}
									}
									break;
								case 'failed':
									toastr.error('There was an error sending your message.', 'Error!');
									break;
								case 'not_installed':
									toastr.error('Please enable our included Nouvello Builder plugin in order to use the Contact Form Feature.', 'Error!');
									break;
							}
						}

					} catch (e){
						return false;
					}
				}
			});

			return false;
		});



		/* ------------------  Custom Cursor  ------------------ */

		function initCustomCursor() {
			if (body.hasClass('custom-cursor')) {
				const cursorInnerEl = document.querySelector('.circle-cursor--inner');
				const cursorOuterEl = document.querySelector('.circle-cursor--outer');
				let lastY, lastX = 0;
				let magneticFlag = false;

				// move
				window.onmousemove = function(event) {
					if (!magneticFlag) {
						cursorOuterEl.style.transform = 'translate(' + event.clientX + 'px, ' + event.clientY + 'px' + ')';
					}
					cursorInnerEl.style.transform = 'translate(' + event.clientX + 'px, ' + event.clientY + 'px' + ')';
					lastY = event.clientY;
					lastX = event.clientX;
				}

				// links hover
				body.on('mouseenter', 'a, .cursor-as-pointer', function() {
					cursorInnerEl.classList.add('cursor-link-hover');
					cursorOuterEl.classList.add('cursor-link-hover');
				});
				body.on('mouseleave', 'a, .cursor-as-pointer', function() {
					if ($(this).is('a') && $(this).closest('.cursor-as-pointer').length) {
						return;
					}
					cursorInnerEl.classList.remove('cursor-link-hover');
					cursorOuterEl.classList.remove('cursor-link-hover');
				});

				// additional hover cursor class
				body.on('mouseenter', '[data-custom-cursor]', function() {
					const cursorClass = $(this).attr('data-custom-cursor');

					if (cursorClass.indexOf('cursor-dark') != -1) {
						cursorInnerEl.classList.add('cursor-dark');
						cursorOuterEl.classList.add('cursor-dark');
					}

					if (cursorClass.indexOf('cursor-link') != -1) {
						cursorInnerEl.classList.add('cursor-link');
						cursorOuterEl.classList.add('cursor-link');
					}
				});
				body.on('mouseleave', '[data-custom-cursor]', function() {
					const cursorClass = $(this).attr('data-custom-cursor');
					if (cursorClass.indexOf('cursor-dark') != -1) {
						cursorInnerEl.classList.remove('cursor-dark');
						cursorOuterEl.classList.remove('cursor-dark');
					}

					if (cursorClass.indexOf('cursor-link') != -1) {
						cursorInnerEl.classList.remove('cursor-link');
						cursorOuterEl.classList.remove('cursor-link');
					}
				});

				// magnet elements
				body.on('mouseenter', '.cursor-magnet, .btn-round', function() {
					const $elem = $(this);
					const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

					cursorOuterEl.style.transition = 'all .2s ease-out';
					cursorOuterEl.style.transform = 'translate(' + $elem.offset().left + 'px, ' + ($elem.offset().top - scrollTop) + 'px' + ')';

					cursorOuterEl.style.width = $elem.width() + 'px';
					cursorOuterEl.style.height = $elem.height() + 'px';
					cursorOuterEl.style.marginLeft = 0;
					cursorOuterEl.style.marginTop = 0;

					magneticFlag = true;
				});

				body.on('mouseleave', '.cursor-magnet, .btn-round', function() {
					cursorOuterEl.style.transition = null;
					cursorOuterEl.style.width = null;
					cursorOuterEl.style.height = null;
					cursorOuterEl.style.marginLeft = null;
					cursorOuterEl.style.marginTop = null;

					magneticFlag = false;
				});

				//iframe fix
				body.on('mouseenter', 'iframe', function() {
					cursorOuterEl.style.visibility = 'hidden';
					cursorInnerEl.style.visibility = 'hidden';
				});
				body.on('mouseleave', 'iframe', function() {
					cursorOuterEl.style.visibility = 'visible';
					cursorInnerEl.style.visibility = 'visible';
				});

				cursorInnerEl.style.visibility = 'visible';
				cursorOuterEl.style.visibility = 'visible';
			}
		}

		if ( body.hasClass('custom-cursor') ) {
			body.prepend('<div class="circle-cursor circle-cursor--outer"></div><div class="circle-cursor circle-cursor--inner"></div>');
			initCustomCursor();
		}

		/* ------------------  WooCommerce - Wish List ------------------ */

		// set cookie
		function setCookie(cookiename, cookievalue, hours) {
			var date = new Date();
			date.setTime(date.getTime() + Number(hours) * 3600 * 1000);
			document.cookie = cookiename + "=" + cookievalue + "; path=/;expires = " + date.toGMTString();
		}

		// get cookie
		function getCookie(cname) {
			var name = cname + "=";
			var decodedCookie = decodeURIComponent(document.cookie);
			var ca = decodedCookie.split(';');
			for (var i = 0; i < ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') {
					c = c.substring(1);
				}
				if (c.indexOf(name) == 0) {
					return c.substring(name.length, c.length);
				}
			}
			return '';
		}

		// get wish list items from cookie
		wishlistItemsString = getCookie('splent_wc_wishlist');
		wishlistItemsArray = wishlistItemsString.replace(/[^0-9,]/g, '').split(',');

		// filter empty values
		var filtered = wishlistItemsArray.filter(function(el) {
			return el != null && el != '';
		});

		if (filtered.length > 0) {
			$('#wishlist-quantity').html('&nbsp;' + filtered.length);
		}

		// default item actions preset - animated drop icons for quick view, add to cart, wishlist.
		if ( undefined == splent_wp_params.shop_item_actions || '-animated-drop-icons' == splent_wp_params.shop_item_actions ) {
			var shop_products = $('.products');
			shop_products.find('.add_to_cart_button').each(function() {

				var btn = $(this),
					item_btns = btn.parents('.product'),
					btn_classes = btn.attr('class'),
					btn_href = btn.attr('href'),
					item_id = '';

				if (undefined != btn_href) {
					item_id = btn.attr('data-product_id') || btn_href.substring(btn_href.indexOf('?') + 1).replace(/[^0-9]/g, '');
					item_btns.find('.quick-view').attr('data-item-id', item_id);
					item_btns.find('.add-fav').attr('data-item-id', item_id);
					// mark items that are currently in the wishlist.
					if ($.inArray(item_id, wishlistItemsArray) !== -1) {
						item_btns.find('.add-fav').addClass('active');
					}
				}

				// hide orig WooCommerce button
				btn.removeClass('button').addClass('hidden');
			});

		}

		// give theme btn classes to all wocoomerce buttons
		$('.button').removeClass('button').addClass('zanaya-wc-btn btn zanaya-btn button-size-small button-text-small button-shape-sharp button-color-primary');

		// WooCommerce my-account links
		// add exception class to links to set them to a darker coor
		$('.woocommerce-MyAccount-navigation-link').not('.is-active').find('a').addClass('exception');

		// add form-control class to form inputs in my-acount pages
		$('.woocommerce-Input').addClass('form-control');

		$('.woocommerce-message .zanaya-btn').addClass('pull-right');
		$('.woocommerce-Message .zanaya-btn').addClass('pull-right');


		/* ------------------  WooCommerce - Quick view, Cart, Favorites  ------------------ */



		var quickViewBtns = body.find('.quick-view'),
			addToCartBtns = body.find('.add-cart'),
			addFavBtns = body.find('.add-fav'),
			wcThumb = $('.product-img-wrapper img').first(),
			wcThumbWidth = wcThumb.attr('width'),
			wcThumbHeight = wcThumb.attr('height');

		// check if thumbnails are square
		if ( wcThumbWidth == wcThumbHeight ) {
			wcThumb.parents('ul.products').addClass('square-thumbs');
		}

		// check if quick view button should be shown.
		quickViewBtns.each(function() {
			var thisBtn = $(this);
			if (undefined == thisBtn.attr('data-item-id')) {
				thisBtn.remove();
			}
		});

		// check if add to cart button should be shown.
		addToCartBtns.each(function() {
			var thisBtn = $(this);
			if (undefined == thisBtn.parents('.product').find('.add_to_cart_button').get(0)) {
				thisBtn.remove();
			}
		});

		// check if add to wish list button should be shown.
		addFavBtns.each(function() {
			var thisBtn = $(this);
			if (undefined == thisBtn.attr('data-item-id')) {
				thisBtn.remove();
			}
		});

		quickViewBtns.on('click', function(e) {
			e.preventDefault();
			e.stopPropagation();
			var dataItemId = this.getAttribute('data-item-id');
			if (undefined != dataItemId && '' != dataItemId) {
				wc_quick_view(dataItemId);
			}
		});
		addToCartBtns.on('click', function(e) {
			e.preventDefault();
			e.stopPropagation();
			var thisBtn = $(this);
			thisBtn.find('.fa').removeClass('fa-shopping-cart').addClass('fa-spinner fa-spin');
			if (undefined != thisBtn.parents('.product').find('.add_to_cart_button').get(0)) {
				thisBtn.parents('.product').find('.add_to_cart_button').trigger('click');
			}
		});
		addFavBtns.on('click', function(e) {
			e.preventDefault();
			e.stopPropagation();
			var thisBtn = $(this);
			if (thisBtn.hasClass('active')) {
				thisBtn.removeClass('active');
				// remove item id from array
				wishlistItemsArray = $.grep(wishlistItemsArray, function(value) {
					return value != thisBtn.attr('data-item-id');
				});
				// update cookie
				setCookie('splent_wc_wishlist', JSON.stringify(wishlistItemsArray), 24 * 365 * 30); // 10 years
				updateNavWishlist('dec');
				toastr.warning('Item removed from your wishlist.', 'Notice!');
			} else {
				thisBtn.addClass('active');
				// add item id to array
				wishlistItemsArray.push(thisBtn.attr('data-item-id'));
				// store in cookie
				setCookie('splent_wc_wishlist', JSON.stringify(wishlistItemsArray), 24 * 365 * 30); // 10 years
				updateNavWishlist('inc');
				toastr.success('Item added to your wishlist.', 'Success!');
			}
		});

		function updateNavWishlist(action) {
			var currentWishlistQuantity = $('#wishlist-quantity');

			// update nav wishlist count
			if (currentWishlistQuantity.length > 0) {
				var wishlistCount = currentWishlistQuantity.text();
				if (undefined == wishlistCount || '' == wishlistCount) {
					wishlistCount = 0;
				} else {
					wishlistCount = wishlistCount.trim();
					wishlistCount = parseInt(wishlistCount, 10);
				}

				if ('inc' == action) {
					wishlistCount++;
				} else if ('dec') {
					wishlistCount--;
				}
				currentWishlistQuantity.text(' ' + wishlistCount);
				if (0 == wishlistCount) {
					currentWishlistQuantity.text(''); // clear quantity number.
				}
				return wishlistCount;
			}
		}


		// wc quick view
		function wc_quick_view(productID) {

			modal.removeClass('dark-overlay').css('background-color', ''); // restore defaults
			modalContent.css({'border': '', 'box-shadow': ''});	// restore defaults.

			$.ajax({
				url: splent_wp_params.ajax_url,
				data: {
					'action': 'splent_wc_quick_view',
					'product_id': productID,
					'nonce': splent_wp_params.ajax_nonce
				},
				type: 'POST',
				beforeSend: function() {
					modalHeader.hide(); // hide close button
					modalPopupHtml.html(''); // clear data
					modalContent.addClass('medium');
					modal.prepend('<div id="modal-popup-spinner" class="text-lg-center lg"><i class="fa fa-spinner fa-spin"></i></div>');
					modal.addClass('modal-active').show();
				},
				success: function(data) {
					openModal(data);
				}
			});
		}


		var modal = body.find('#zanaya-modal-popup'),
			modalHeader = modal.find('#modal-popup-header'),
			modalPopupHtml = modal.find('#modal-popup-html'),
			modalContent = modal.find('#modal-popup-content');

		function openModal(data) {
			modalHeader.hide(); // hide close button
			$('#modal-popup-spinner').remove(); // remove spinner
			modalPopupHtml.html(data); // append data
			// replace WooCommerce button
			modalPopupHtml.find('.button').removeClass('button').addClass('btn zanaya-btn button-size-small button-text-small button-shape-sharp button-color-primary');
			modal.addClass('modal-active').show();
			modalHeader.show(); // show close button
			modalContent.addClass('visible');
		}

		// modal window
		$(document).on('click', '#modal-popup-content .attachment-shop_single', function(e) {
			e.preventDefault();
			e.stopPropagation();
			e.stopImmediatePropagation();
			$('.woocommerce-main-image').find('img').attr('src', this.src);
		});

		// close modal button
		$('#modal-popup-close').on('click', function(event) {
			event.preventDefault();
			modal.removeClass('modal-active').hide(400);
			modalContent.removeClass('visible medium');
			return false;
		});

		// close modal when clicking outside of modal area
		$('#modal-popup-close-block').on('click', function(event) {
			event.preventDefault();
			modal.removeClass('modal-active').hide(400);
			modalContent.removeClass('visible');
			return false;
		});


		$(document.body).on('added_to_cart', function(event, fragments, cart_hash, $button) {

			if ($button.closest('div.cross-sells')) {
				// was a cross-sell added to the cart
			}

			$('.shop-loop-item-btns .fa-spinner').removeClass('fa-spinner fa-spin').addClass('fa-check');
			toastr.success('Item added to your cart.', 'Success!');

			$.ajax({
				url: splent_wp_params.ajax_url,
				data: {
					'action': 'splent_update_nav_cart',
					'nonce': splent_wp_params.ajax_nonce
				},
				type: 'POST',
				success: function(data) {
					var shoppingCart = $('.zanaya-shopping-cart');
					shoppingCart.wrap('<div id="temp-shopping-cart-wrap"></div>');
					var shoppingCartParent = shoppingCart.parent();
					shoppingCartParent.html(data); // update nav cart
					shoppingCartParent.contents().unwrap(); // remove temp wrap
				}
			});

		});
		
		$(document).on('click', '.single_add_to_cart_button', function(e) {
			e.preventDefault();

			let $thisbutton = $(this),
					$form = $thisbutton.closest('form.cart'),
					id = $thisbutton.val(),
					product_qty = $form.find('input[name=quantity]').val() || 1,
					product_id = $form.find('input[name=product_id]').val() || id,
					variation_id = $form.find('input[name=variation_id]').val() || 0;

			let dataObj = {
						action: 'splent_single_product_ajax_add_cart',
						product_id: product_id,
						product_sku: '',
						quantity: product_qty,
						variation_id: variation_id,
						nonce: splent_wp_params.ajax_nonce,
					};

			$.ajax({
				type: 'post',
				url: splent_wp_params.ajax_url,
				data: dataObj,
				beforeSend: function (response) {
					$thisbutton.removeClass('added').addClass('loading');
				},
				complete: function (response) {
					$thisbutton.addClass('added').removeClass('loading');
				},
				success: function (response) {
					if (response.error & response.product_url) {
						window.location = response.product_url;
						return;
					} else {
						$(document.body).trigger('added_to_cart', [response.fragments, response.cart_hash, $thisbutton]);
					}
				},
			});
			return false;
		});

		/* ------------------  WooCommerce - Grid / List views ------------------ */

		var grid = $('#grid'),
			list = $('#list'),
			ulProducts = $('ul.products');

		grid.on('click', function(e) {
			e.preventDefault();
			$(this).addClass('active');
			list.removeClass('active');
			$.cookie('gridcookie', 'grid', {
				path: '/'
			});
			ulProducts.fadeOut(300, function() {
				$(this).addClass('grid').removeClass('list').fadeIn(300);
			});
			return false;
		});

		list.on('click', function(e) {
			e.preventDefault();
			$(this).addClass('active');
			grid.removeClass('active');
			$.cookie('gridcookie', 'list', {
				path: '/'
			});
			ulProducts.fadeOut(300, function() {
				$(this).removeClass('grid').addClass('list').fadeIn(300);
			});
			return false;
		});

		if ($.cookie) {

			if ($.cookie('gridcookie')) {
				$('ul.products, #gridlist-toggle').addClass($.cookie('gridcookie'));
			}

			if ($.cookie('gridcookie') == 'grid') {
				$('.gridlist-toggle #grid').addClass('active');
				$('.gridlist-toggle #list').removeClass('active');
			}

			if ($.cookie('gridcookie') == 'list') {
				$('.gridlist-toggle #list').addClass('active');
				$('.gridlist-toggle #grid').removeClass('active');
			}

		}

		// WooCommerce sort by
		var wcSelect = $('.woocommerce-ordering select');
		var sortByDropdown = $('#wc-sort-by-dropdown .dropdown-menu');
		wcSelect.find('option').each(function() {
			var $this = $(this);
			var text = $this.text();
			var dataVal = $this.val();
			sortByDropdown.append('<li><a href="?orderby=' + dataVal + '" data-val="' + dataVal + '">' + text + '</a></li>');
		});

		$('#sort-by').on('click', function() {
			$(this).toggleClass('active');
			$(this).parent().find('.dropdown').toggleClass('open');
		});

		// WooCommerce tabs h size - single product page, effects tabs and related products

		content.find('.cross-sells h2').replaceWith(function() {
			return '<h6>' + $(this).html() + '</h6>';
		});

		content.find('h2.woocommerce-loop-product__title').replaceWith(function() {
			return '<h5 class="woocommerce-loop-product__title">' + $(this).html() + '</h5>';
		});


		content.find('.product h2').not('.woocommerce-loop-product__title').not('.post-rows-1-date').replaceWith(function() {
			return '<h5>' + $(this).html() + '</h5>';
		});

		// WooCommerce checkout page
		content.find('.woocommerce-billing-fields h3').replaceWith(function() {
			return '<h5 class="z-mt-0">' + $(this).html() + '</h5>';
		});

		content.find('.woocommerce-additional-fields h3').replaceWith(function() {
			return '<h5 class="z-mt-0">' + $(this).html() + '</h5>';
		});

		content.find('#order_review_heading').replaceWith(function() {
			return '<h4>' + $(this).html() + '</h4>';
		});

		// WooCommerce message links
		content.find('.woocommerce-info a').addClass('exception');
		content.find('.woocommerce-message a').addClass('exception');

		// WooCommerce single product page - submit review button in review tab
		content.find('.woocommerce #respond input#submit').removeAttr('id').addClass('zanaya-wc-btn respond-btn btn zanaya-btn button-size-small button-text-small button-shape-sharp button-color-primary');

		// WooCommerce cart page - remove item link
		content.find('.product-remove .remove').html('<i class="fa fa-close"></i>');

		// wishlist page - remove item from wishlist
		content.find('.wishlist-remove').on('click', function(e) {
			e.preventDefault();
			e.stopPropagation();

			var thisBtn = $(this),
				thisParent = $(this).parents('.splent-woocommerce-wishlist-product'),
				currentWishlistCount = $('.zanaya-multi-nav #wishlist-quantity');

			// fadeout and remove item.
			thisParent.fadeOut(300, function() {
				$(this).remove();
			});
			var updatedCount = updateNavWishlist('dec');

			// remove item id from array
			wishlistItemsArray = $.grep(wishlistItemsArray, function(value) {
				return value != thisBtn.attr('data-item-id');
			});
			// update cookie
			setCookie('splent_wc_wishlist', JSON.stringify(wishlistItemsArray), 24 * 365 * 30); // 10 years

			if (0 == updatedCount) {
				$('.splent-woocommerce-wishlist-table').addClass('hidden');
				$('.empty-wishlist').removeClass('hidden');
			}
		});


		// WooCommerce search widget //
		var wc_search_widget_form = $('.widget_product_search form');
		wc_search_widget_form.each(function() {
			var this_form = $(this);
			this_form.find('label').wrap('<div class="form-group"></div>');
			this_form.find('.form-group').append('<div class="input-group zanaya-form-element"></div>');

			this_form.find('input[type="search"]').addClass('search-field form-control').appendTo(this_form.find('.input-group'));
			this_form.find('button').addClass('btn btn-default').html('<i class="fa fa-search">').wrap('<div class="input-group-btn"></div>');
			this_form.find('.input-group-btn').appendTo(this_form.find('.input-group'));
		});

		// WooCommerce filter by attributes widget - dropdown
		$('.woocommerce-widget-layered-nav-dropdown__submit').addClass('btn zanaya-btn button-size-small button-text-small button-color-primary');

		// WooCommerce filter by attributes widget - list 
		$('.woocommerce-widget-layered-nav-list').find('.count').each(function() {
			var this_count = $(this);
			this_count.addClass('pull-right');
			this_count.html('<small>' + this_count.text().replace('(', '').replace(')', '') + '</small>');
		});

		// woocommerce single product - vertical thumbnails
		var wcVerticalGallery = $('.woocommerce-product-gallery.vertical-thumbnails');
		if ( wcVerticalGallery.length > 0 ) {
			if ( ! wcVerticalGallery.hasClass('vertical-right') ) {
				// move on sale flash badge inside the gallery wrapper.
				$('.onsale').appendTo($('.woocommerce-product-gallery__wrapper'));				
			} else {
				setTimeout(function(){
					$('.flex-viewport').prepend($('.woocommerce-product-gallery__trigger'));
				}, 500); // delay to allow the flex-viewport div to be created by woocommerce
			}
		}

		// sticky product
		var stickyProductElement = $('.sticky-product');
		var stickyProductPagination = $('.sticky-nav-product');
		var checkStickyProduct = debounce(function() {
			if($_window.scrollTop() + $_window.height() == $(document).height()) {
				stickyProductElement.addClass('visible');
				stickyProductPagination.addClass('invisible');
			} else {
				stickyProductElement.removeClass('visible');
				stickyProductPagination.removeClass('invisible');
			}
		}, 50); // throttle by 50ms.
		window.addEventListener('scroll', checkStickyProduct);

		// Animated multi icons - izotope caption preset 2.
		var galleryCaptionPreset2Items = $('.zanaya-gallery-item[data-caption-preset="2"]');
		galleryCaptionPreset2Items.find('.zanaya-icon').css('transform','scale(0)');

		galleryCaptionPreset2Items.on({
			mouseenter: function(){
				var $this = $(this),
						icon1 = $this.find('[data-zanaya-animations]')[0],
						icon2 = $this.find('[data-zanaya-animations]')[1];
				animateIcon(icon1, 'scale', 1, 800, 400, 0); // enter icon 1.
				animateIcon2(icon2, 1, 800, 400, 50);  // enter icon 1.
			},
			mouseleave: function(){
				var $this = $(this),
						icon1 = $this.find('[data-zanaya-animations]')[0],
						icon2 = $this.find('[data-zanaya-animations]')[1];
				animateIcon(icon1, 'scale', 0, 600, 300, 0);  // leave icon 2.
				animateIcon2(icon2, 0, 600, 300, 0); // leave icon 2.
			},
		});

		function animateIcon(el, property, animateTo, duration, elasticity, delay) {
			anime.remove(el);
			var animationObj = {
				'targets': el,
				'delay': delay,
				[property]: animateTo,
				'duration': duration,
				'elasticity': elasticity
			}
			anime(animationObj);
		}

		function animateIcon2(el, scale, duration, elasticity, delay) {
			anime.remove(el);
			anime({
				targets: el,
				delay: delay,
				scale: scale,
				duration: duration,
				elasticity: elasticity
			});
		}

		// single post layout 8 (synced scroll layout)
		if ( $('.single-post-layout-8').length > 0 ) {
			$_window.on('scroll', function(){
				var singlePostLayout8 = $('.single-post-layout-8'), 
				panel = singlePostLayout8.find('.entry-content .zanaya-section'),
				index = 0,
				scroll = $_window.scrollTop() + ($_window.height() / 3); // Change 33% earlier than scroll position so colour is there when you arrive.
				
				panel.each(function (i, t) {
					var $this = $(this);
					index = i+1;
					// if position is within range of this panel.
					// So position of (position of top of div <= scroll position) && (position of bottom of div > scroll position).
					// Remember we set the scroll to 33% earlier in scroll var.
					if ($this.position().top <= scroll && $this.position().top + $this.height() > scroll) {
						singlePostLayout8.find('.entry-content .zanaya-section').removeClass('active');
						singlePostLayout8.find('.item').removeClass('active');
						$this.addClass('active');
						singlePostLayout8.find('.synced-item-'+index).addClass('active');
					}
				}); 
			});
		}


		function positionSwitch () {
			$('.switch-alt').each(function() {
				$(this).css('top', $('.switch-el').offset().top -  $(this).closest('.zanaya-col').offset().top );
			});
		}
  
		if ( $('.switch-el').length > 0 ){
			$_window.scroll(function() {
				positionSwitch();
			});
			positionSwitch();			
		}

}); // end of document ready



